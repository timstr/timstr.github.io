!function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(o,a,function(t){return e[t]}.bind(null,a));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=22)}([function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.makePathPrettyName=t.pathUpOne=t.getPathHeadName=t.getPathSiblings=t.makePathFileName=t.pathContains=t.__DoNotUse_SafetyCheck_B__=t.__DoNotUse_SafetyCheck_A__=void 0;const o=["Tim's Portfolio",{index:"About Me",machine_learning:["Machine Learning",{index:"List of Projects",acoustic_reconstruction:"Acoustic Reconstruction",graph_merging:"Differentiable Graph Merging",boneless:"Soft-Bodied Locomotion",hand_gesture_recognition:"Hand Gesture Recognition",hand_gesture_synthesis:"Hand Gesture Synthesis"}],audio:["Audio",{flosion:["Flosion",{index:"About",howitworks:"How It Works",implementation:"Implementation",examples:"Examples",gallery:"Song Gallery"}]}],graphics:["Graphics",{pathtracing:["Path Tracing",{index:"About",gallery:"Gallery"}],fractals2d:["2D Fractals",{index:"About",gallery:"Gallery"}],fractals3d:["3D Fractals (Old)",{index:"About",gallery:"Gallery"}],cellularautomata:"Cellular Automata"}],physics:["Physics",{rigidbodydynamics:["Rigid Body Dynamics",{index:"About",circleboxstacking:"Circle Box Stacking",boxchain:"Box Chain",frictiondemo:"Friction Demo",frictionlessboxes:"Frictionless Boxes",circlepile:"Circle Pile",images:"Images"}]}],artwork:["Artwork",{index:"Selected Works",gallery:"Gallery",ti84plus:"TI-84 Plus Graphing Calculator"}],personal:["Personal Stuff",{index:"Tim Doing Things",taipan:"Tai Pan Server",mushrooms:"Mushroom Photography",recipes:"Recipes"}]}];function a(e){let t=o[1];for(let n of e.slice(0,e.length-1))t=t[n][1];const n=t[e[e.length-1]];return"string"==typeof n?n:n[0]}function r(e){return 1===e.length?null:e.slice(0,e.length-1)}t.__DoNotUse_SafetyCheck_A__=e=>{},t.__DoNotUse_SafetyCheck_B__=()=>t.__DoNotUse_SafetyCheck_A__(o),t.pathContains=function(e,t){for(let n=0;n<t.length;++n){if(n>e.length)return"index"===t[n];if(t[n]!==e[n])return!1}return!0},t.makePathFileName=function(e){let t=e,n=o[1];for(let t of e.slice(0,e.length-1))n=n[t][1];let a=n[e[e.length-1]];for(;Array.isArray(a);)if(a=a[1],"object"==typeof a){const e=Object.keys(a)[0];t.push(e),a=a[e]}return"/"+t.join("/")+".html"},t.getPathSiblings=function(e){let t=[],n=o[1],a=[];for(let o of e){const e=Object.keys(n);t.push(e.map(e=>a.concat([e]))),a.push(o),n=n[o],"string"==typeof n?n=null:Array.isArray(n)&&(n=n[1])}return t},t.getPathHeadName=a,t.pathUpOne=r,t.makePathPrettyName=function(e,t,n,o){void 0===n&&(n=" | "),void 0===o&&(o="Tim's Portfolio");let s=e,i=[];for(;null!==s;)i.push(a(s)),s=r(s);return""!==o&&i.push(o),"RootToLeaf"===t&&(i=i.reverse()),i.join(n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.linearMix=t.Color=void 0;class o{constructor(e,t,n,o){this._r=0,this._g=0,this._b=0,this._a=1,"string"==typeof e?this.parseHexString(e):"number"==typeof e&&(this._r=e,this._g=t,this._b=n,this._a=void 0===o?1:o)}get red(){return this._r}get green(){return this._g}get blue(){return this._b}get alpha(){return this._a}set red(e){this._r=Math.min(Math.max(e,0),1)}set green(e){this._g=Math.min(Math.max(e,0),1)}set blue(e){this._b=Math.min(Math.max(e,0),1)}set alpha(e){this._a=Math.min(Math.max(e,0),1)}toHexString(){return"#"+this.toHexByte(this._r)+this.toHexByte(this._g)+this.toHexByte(this._b)+this.toHexByte(this._a)}clone(){return new o(this._r,this._g,this._b,this._a)}parseHexString(e){if(/^#[0-9a-fA-F]*$/.test(e)){if(4===e.length)return this._r=parseInt(e.slice(1,2),16)/15,this._g=parseInt(e.slice(2,3),16)/15,this._b=parseInt(e.slice(3,4),16)/15,void(this._a=1);if(5===e.length)return this._r=parseInt(e.slice(1,2),16)/15,this._g=parseInt(e.slice(2,3),16)/15,this._b=parseInt(e.slice(3,4),16)/15,void(this._a=parseInt(e.slice(4,5),16)/15);if(7===e.length)return this._r=parseInt(e.slice(1,3),16)/255,this._g=parseInt(e.slice(3,5),16)/255,this._b=parseInt(e.slice(5,7),16)/255,void(this._a=1);if(9===e.length)return this._r=parseInt(e.slice(1,3),16)/255,this._g=parseInt(e.slice(3,5),16)/255,this._b=parseInt(e.slice(5,7),16)/255,void(this._a=parseInt(e.slice(7,9),16)/255)}throw Error("Invalid hexadecimal color string")}toHexByte(e){const t=Math.min(Math.max(Math.round(255*e),0),255).toString(16);return 1==t.length?"0"+t:t}}t.Color=o,t.linearMix=function(e,t,n){const a=void 0===n?.5:n,r=1-a;return new o(e.red*r+t.red*a,e.green*r+t.green*a,e.blue*r+t.blue*a,e.alpha*r+t.alpha*a)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LocalLink=t.Link=void 0;const o=n(0),a=n(1);t.Link=e=>o.createElement("a",{href:e.dst,target:"_blank",rel:"noopener noreferrer"},e.children),t.LocalLink=e=>o.createElement("a",{href:a.makePathFileName(e.dst)},e.children)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TabMenuItem=void 0;const o=n(0);class a extends o.Component{constructor(e){super(e),this.startHover=()=>{this.setState({hover:!0})},this.stopHover=()=>{this.setState({hover:!1})},this.state={hover:!1}}render(){let e=this.props.color;this.props.active&&this.props.activeColor?e=this.props.activeColor:this.state.hover&&this.props.hoverColor&&(e=this.props.hoverColor);const t={backgroundColor:e.toHexString()};return o.createElement("div",{className:this.props.active?"tabmenuitem-active":"tabmenuitem",style:t,onClick:this.props.onClick,onMouseEnter:this.startHover,onMouseLeave:this.stopHover},o.createElement("span",{className:"tabmenuitem-title"},this.props.title))}}t.TabMenuItem=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderPage=void 0;const o=n(0),a=n(6),r=n(1),s=n(7);t.renderPage=function(e,t){a.render(o.createElement(s.Main,{currentTab:e},t),document.getElementById("main")),document.title=r.makePathPrettyName(e,"LeafToRoot")}},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Main=void 0;const o=n(0),a=n(8),r=n(2),s=[new r.Color("#626289"),new r.Color("#FFFFFF"),new r.Color("#DDDDDD"),new r.Color("#FFFFFF"),new r.Color("#DDDDDD")];t.Main=e=>o.createElement(o.Fragment,null,o.createElement("div",{className:"backdrop"}),o.createElement("div",{className:"maincontainer"},o.createElement("div",{className:"mainbody"},o.createElement("h1",{className:"mainheader"},"Tim's Portfolio"),o.createElement(a.StaticTabMenuStack,{currentTab:e.currentTab,colours:s,children:e.children}))))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StaticTabMenuStack=void 0;const o=n(0),a=n(2),r=n(4),s=n(1),i=n(3),l=e=>{const t=a.linearMix(e.backgroundColor,e.contentColor,.5),n=a.linearMix(t,new a.Color("#fff"),.5);return o.createElement("div",{className:"tabmenu",style:{backgroundColor:e.backgroundColor.toHexString()}},o.createElement("div",{className:"tabmenu-list"},e.tabs.map(a=>(a=>{const l=s.getPathHeadName(a);return o.createElement(i.LocalLink,{dst:a,key:l},o.createElement(r.TabMenuItem,{active:s.pathContains(e.currentTab,a),title:l,color:t,hoverColor:n,activeColor:e.contentColor,onClick:()=>{}}))})(a))),o.createElement("div",{className:"tab-content",style:{backgroundColor:e.contentColor.toHexString()}},e.children))};t.StaticTabMenuStack=e=>{const t=s.getPathSiblings(e.currentTab);let n=e.children;const a=t=>e.colours[t%e.colours.length];let r=t.length,i=a(r);for(let s of t.reverse()){r-=1;const t=a(r);n=o.createElement(l,{backgroundColor:t,contentColor:i,currentTab:e.currentTab,tabs:s},n),i=t}return o.createElement(o.Fragment,null,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SubSection=t.Section=void 0;const o=n(0);t.Section=e=>o.createElement("div",{className:"section"},o.createElement("div",{className:"section-heading"},o.createElement("div",{className:"section-contents"},e.header)),o.createElement("div",{className:"section-body"},o.createElement("div",{className:"section-contents"},e.children))),t.SubSection=e=>o.createElement("div",{className:"subsection"},e.children)},,,,,,,,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(5),r=n(9),s=n(3),i=n(23);a.renderPage(["audio","flosion","implementation"],o.createElement(o.Fragment,null,o.createElement("h1",null,"How Flosion Is Written"),o.createElement(r.Section,{header:o.createElement("h2",null,"Implementation")},o.createElement("h4",null,o.createElement("code",null,"NumberSource")," and ",o.createElement("code",null,"NumberInput")),o.createElement("p",null,"Flosion is written in C++ and uses"," ",o.createElement(s.Link,{dst:"https://www.sfml-dev.org/"},"SFML")," for drawing, playing sounds, handling user input, and managing windows. Additionally, Flosion uses a GUI library that I wrote myself and have used for other projects, which is very much inspired by HTML and its JavaScript interface. The GUI is also written in modern C++ and uses SFML."),o.createElement("p",null,"The source code makes heavy use of inheritance and templates. Inheritance is used to provide a generic interface for sound and number objects to communicate, while templates are used to avoid boilerplate and preserve type-safety. The code shown here is stripped down significantly, and in the actual source code, a lot of book-keeping methods are necessary, which are not needed to understand the basics."),o.createElement("p",null,"Here are the essentials details of the ",o.createElement("code",null,"NumberSource")," ","class, which every number object inherits from."," ",o.createElement("code",null,"evaluate()")," is a polymorphic function that number objects override to compute whatever they like."," ",o.createElement("code",null,"dependencies")," and ",o.createElement("code",null,"dependants")," represent the objects that are directly connected as inputs and outputs."),o.createElement(i.CodeSnippet,null,"struct NumberSource {\n    virtual float evaluate(const State* state) = 0;\n\nprivate:\n    Stateful* const parent;\n    std::vector<Stateful*> dependencies;\n    std::vector<Stateful*> dependants;\n};"),o.createElement("p",null,"Another class, called ",o.createElement("code",null,"NumberInput"),", is used to connect to any number object and get its value, or some default value if nothing is connected."),o.createElement(i.CodeSnippet,null,"struct NumberInput {\n\n    void setSource(NumberSource* _source);\n\n    float getValue(const State* state, float default_value = 0) const;\n\nprivate:\n    NumberSource* source;\n};"),o.createElement("p",null,"Using both of these classes, the 'Add' number object can be now implemented like this:"),o.createElement(i.CodeSnippet,null,"struct Add : NumberSource {\n    float evaluate(const State* state) override {\n        return input1.getValue(state) + input2.getValue(state);\n    }\n\n    NumberInput input1, input2;\n};"),o.createElement("p",null,"The ",o.createElement("code",null,"state")," parameter is used to record the current context, and represents a path in the state tree. It can be used to get the (relative) current time, and is needed by stateful number sources (which live inside sound objects) to retrieve the correct stateful information."),o.createElement(r.SubSection,null,o.createElement("h4",null,o.createElement("code",null,"State")," and ",o.createElement("code",null,"Stateful")),o.createElement("p",null,"Below is the ",o.createElement("code",null,"State")," class, which is the base class of every type of state. It simply stores a pointer to its parent state, and a pointer to the ",o.createElement("code",null,"Stateful")," ","object that owns this state. A polymorphic"," ",o.createElement("code",null,"reset()")," function is used to restore states to their original condition. Derived ",o.createElement("code",null,"State")," types are used to hold whatever time-sensitive information that"," ",o.createElement("code",null,"Stateful")," objects need to store. Rather than storing stateful data through instance members,"," ",o.createElement("code",null,"Stateful")," objects will use many instances of a custom ",o.createElement("code",null,"State")," type."),o.createElement(i.CodeSnippet,null,"struct State {\n    State(const State* _parent, const Stateful* _owner);\n    virtual ~State();\n\n    virtual void reset() = 0;\n\nprivate:\n\n    const State* const parent;\n    const Stateful* const owner;\n};"),o.createElement("p",null,"And here is the ",o.createElement("code",null,"Stateful")," base class, which represents any type that stores stateful information in some collection of ",o.createElement("code",null,"State")," objects. The details of how this is done varies by sub-class. For example,"," ",o.createElement("code",null,"SoundSource"),", ",o.createElement("code",null,"SingleInput")," and"," ",o.createElement("code",null,"MultiInput")," all store states slightly differently, but the ",o.createElement("code",null,"Stateful")," class is common interface shared by all, which makes sorting out dependencies much simpler."),o.createElement(i.CodeSnippet,null,"struct Stateful {\n    virtual ~Stateful();\n\n    virtual double getTimeSpeed(const State* state_chain) const;\n\n    uint32_t getTime(const State* state_chain) const;\n\n    virtual std::size_t numStates() const = 0;\n\n    std::vector<Stateful*> dependencies;\n    std::vector<Stateful*> dependants;\n};")),o.createElement(r.SubSection,null,o.createElement("h4",null,"The ",o.createElement("code",null,"SoundSource")," Base Class"),o.createElement("p",null,"Every type of sound object is represented by a basic"," ",o.createElement("code",null,"SoundSource")," base class. Since every sound object needs to manage stateful information,"," ",o.createElement("code",null,"SoundSource")," derives from ",o.createElement("code",null,"Stateful"),". The ",o.createElement("code",null,"getNextChunk")," method is used to fetch up-to-date snippets of sound information from the sound object, and by calling this method rapidly and regularly, a stream is created which contains real-time audio information."),o.createElement(i.CodeSnippet,null,"struct SoundSource : Stateful {\n\n    virtual void getNextChunk(SoundChunk& chunk, const State* dependant_state, const Stateful* dst) = 0;\n\nprotected:\n    std::vector<SoundInput*> destinations;\n};"),o.createElement("p",null,"While the ",o.createElement("code",null,"SoundSource")," class is simple enough to be used generically by any kind of sound input, it doesn't concern itself with how it stores states or even what kind of state it works with. This is where"," ",o.createElement("code",null,"SoundSourceBase")," comes in."," ",o.createElement("code",null,"SoundSourceBase")," exists to automatically manage creating, updating, and retrieving states of any type. This class exists for the convenience and safety of not having to do this tedious work for each new sound object type. The class overrides ",o.createElement("code",null,"SoundSource::getNextChunk()"),", which provides only weakly-typed state information, and retrieves its own, strongly-typed internal state, which is provided to the new ",o.createElement("code",null,"renderChunk()"),", which, in derived sound object classes, does the actual work of producing sound."),o.createElement(i.CodeSnippet,null,'template <class StateType>\nstruct SoundSourceBase : SoundSource {\n\n    void getNextChunk(SoundChunk& chunk, const State* parent_state, const Stateful* dst) override {\n        StateType& state = lookupState(parent_state, dst);\n        renderChunk(chunk, state);\n    }\n\n    virtual void renderChunk(SoundChunk& chunk, StateType& state) = 0;\n\n    template <typename SoundSourceType = SoundSource>\n    struct StateNumberSource : NumberSource {\n\n        float evaluate(const State* state) const override;\n\n        virtual float getValue(const StateType& state, const State* context) const = 0;\n    };\n\nprivate:\n\n    StateType& lookupState(const State* parent_state, const Stateful* dependant) {\n        auto it = state_map.find(std::make_pair(parent_state, dependant));\n        if (it == state_map.end()) {\n            throw std::runtime_error("The parent state could not be found in the state map");\n        } else {\n            return it->second;\n        }\n    }\n\n    std::unordered_map<std::pair<const State*, const Stateful*>, StateType> state_map;\n};')),o.createElement(r.SubSection,null,o.createElement("h4",null,"Concrete Example"),o.createElement("p",null,"All the above code, and much more code that isn't being shown, exist to make implementing new sound object far simpler and less error-prone than it otherwise would be. In this example, the ",o.createElement("code",null,"Audio")," class is implemented, which is a sound object that simply loads a sound from a file and produces this sound as its output. To make do this, only two things are needed. One needs to define what information it stores as part of its state, which is done here in the ",o.createElement("code",null,"AudioState")," class. In this case, the only state that's needed is an index into where in the audio file we're currently listening from, which shall be called"," ",o.createElement("code",null,"pos"),"."),o.createElement(i.CodeSnippet,null,"struct AudioState : State {\n\n    void reset() override {\n        pos = 0;\n    }\n\n    uint64_t pos;\n};"),o.createElement("p",null,"Finally, one needs to define the ",o.createElement("code",null,"Audio")," class itself, which derives from"," ",o.createElement("code",null,"SoundSourceBase<AudioState>"),", so that all stateful information and dependencies and so on are perfectly and implicitly managed. The"," ",o.createElement("code",null,"SoundSourceBase<AudioState>::renderChunk()")," ","method is overridden to do the actual work of playing the sound. The implementation isn't shown here, since it's mostly ",o.createElement("code",null,"for"),"-loops and and sample frequency calculations and audio channel checks, but all it does is copy the current part of the audio clip into the current"," ",o.createElement("code",null,"SoundChunk")," of the stream, using"," ",o.createElement("code",null,"state.pos")," for book-keeping. This audio clip itself is stored in the ",o.createElement("code",null,"soundbuffer")," member. Note that this piece of sound information will always be the same, no matter who's listening to this ",o.createElement("code",null,"Audio")," ","object, and therefore, it is not stored in the"," ",o.createElement("code",null,"AudioState")," type. As an extra, this class also defines and exposes a ",o.createElement("code",null,"current_time")," member, which is a special kind of number source that is associated with the state of the ",o.createElement("code",null,"Audio")," object. This number source can be used to query the (subjective) current time of the ",o.createElement("code",null,"Audio")," object. As you can see, this work, which is complicated and delicate at heart, is handled well by templates and inheritance, and the code needed to implement new and interesting features is minimal."),o.createElement(i.CodeSnippet,null,"struct Audio : SoundSourceBase<AudioState> {\n\n    void loadFromFile(std::string filename);\n\n    void renderChunk(SoundChunk& chunk, AudioState& state) override;\n\n    struct CurrentTime : StateNumberSource<Audio> {\n        float getValue(const AudioState& state, const State* context) const override {\n            return state->pos / (float)SAMPLE_FREQUENCY;\n        }\n    } current_time;\n\nprivate:\n    sf::SoundBuffer soundbuffer;\n};"))),o.createElement(r.Section,{header:o.createElement("h2",null,"Full Source Code")},o.createElement("p",null,"The Flosion source code is stored on github, and can be found"," ",o.createElement(s.Link,{dst:"https://github.com/timstr/Flosion"},"here"),"."))))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CodeSnippet=void 0;const o=n(0);t.CodeSnippet=e=>o.createElement("div",{className:"codesnippet"},o.createElement("code",null,o.createElement("pre",null,e.children)))}]);