{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/components/Common/Link.tsx","webpack:///./src/components/Common/Section.tsx","webpack:///./src/interfaces/Color.ts","webpack:///./src/components/Common/TabMenu.tsx","webpack:///./src/components/Common/BigImage.tsx","webpack:///./src/components/Common/SoundCloudPlayer.tsx","webpack:///./src/components/Common/ImageIcon.tsx","webpack:///./src/components/Common/LazyImage.tsx","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/Main.tsx","webpack:///./src/components/FaceIcon.tsx","webpack:///./src/components/Flosion/Flosion.tsx","webpack:///./src/components/Flosion/AboutFlosion.tsx","webpack:///./src/components/Flosion/HowItWorks.tsx","webpack:///./src/components/Flosion/Examples.tsx","webpack:///./src/components/Flosion/Implementation.tsx","webpack:///./src/components/Common/CodeSyntax.tsx","webpack:///./src/components/Flosion/Snippets.ts","webpack:///./src/components/Flosion/SongGallery.tsx","webpack:///./src/components/RigidBodyDynamics/RigidBodyDynamics.tsx","webpack:///./src/components/CellularAutomata/CellularAutomata.tsx","webpack:///./src/components/OtherProjects/OtherProjects.tsx","webpack:///./src/components/OtherProjects/TimsGUI.tsx","webpack:///./src/components/OtherProjects/GibberishGenerators.tsx","webpack:///./src/components/OtherProjects/RandomThings.tsx","webpack:///./src/components/OtherProjects/PlatformerGame.tsx","webpack:///./src/components/Fractals/Fractals.tsx","webpack:///./src/components/Fractals/AboutFractals.tsx","webpack:///./src/components/Fractals/FractalGallery.tsx","webpack:///./src/components/AboutMe/AboutMe.tsx","webpack:///./src/components/AboutMe/Intro.tsx","webpack:///./src/components/AboutMe/MySkills.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","Link","props","createElement","href","dst","target","rel","children","Section","className","header","SubSection","Color","[object Object]","x1","x2","x3","x4","this","_r","_g","_b","_a","parseHexString","undefined","red","green","blue","alpha","val","Math","min","max","toHexByte","str","test","length","parseInt","slice","Error","res","round","toString","linearMix","color1","color2","ratio","Color_1","TabItem","Component","super","startHover","setState","hover","stopHover","state","color","active","activeColor","hoverColor","style","backgroundColor","toHexString","onClick","onMouseEnter","onMouseLeave","title","TabMenu","onSelectTab","tab","theTab","tabs","find","content","render","currentTab","tabColor","contentColor","lighter","map","BigImage","path","includes","src","SoundCloudPlayer","width","height","scrolling","frameBorder","allow","trackid","LazyImage_1","Link_1","ImageIcon","image","LazyImage","handleLoad","loaded","onLoad","opacity","ReactDom","Main_1","Main","document","getElementById","ReactDOM","FaceIcon_1","Flosion_1","RigidBodyDynamics_1","CellularAutomata_1","OtherProjects_1","TabMenu_1","Fractals_1","AboutMe_1","Fragment","FaceIcon","AboutMe","Flosion","Fractals","RigidBodyDynamics","CellularAutomata","OtherProjects","AboutFlosion_1","HowItWorks_1","Examples_1","Implementation_1","SongGallery_1","AboutFlosion","HowItWorks","Implementation","Examples","SongGallery","Section_1","BigImage_1","SoundCloudPlayer_1","CodeSyntax_1","Snippets_1","CodeSnippet","NumberSourceSnippet","NumberInputSnippet","AddObjectSnippet","StateSnippet","StatefulSnippet","SoundSourceSnippet","SoundSourceBaseSnippet","AudioStateSnippet","AudioSnippet","KeyWord","Type","Name","Comment","PlayList","song","TimsGUI_1","GibberishGenerators_1","RandomThings_1","PlatformerGame_1","TimsGUI","PlatformerGame","GibberishGenerators","RandomThings","AboutFractals_1","FractalGallery_1","gotoTab","AboutFractals","gotoGallery","FractalGallery","ImageIcon_1","FractalImages","names","Pictures","img","Intro_1","MySkills_1","Intro","MySkills"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,mBClFAhC,EAAAD,QAAAkC,qFCAA,MAAAA,EAAApC,EAAA,GAOaE,EAAAmC,KAAO,CAACC,GACjBF,EAAAG,cAAA,KAAGC,KAAMF,EAAMG,IAAKC,OAAO,SAASC,IAAI,uBACnCL,EAAMM,0FCTf,MAAAR,EAAApC,EAAA,GAOaE,EAAA2C,QAAU,CAACP,GACpBF,EAAAG,cAAA,OAAKO,UAAU,WACXV,EAAAG,cAAA,OAAKO,UAAU,mBACXV,EAAAG,cAAA,OAAKO,UAAU,oBAAoBR,EAAMS,SAE7CX,EAAAG,cAAA,OAAKO,UAAU,gBACXV,EAAAG,cAAA,OAAKO,UAAU,oBAAoBR,EAAMM,aAKxC1C,EAAA8C,WAAa,CAACV,GACvBF,EAAAG,cAAA,OAAKO,UAAU,cAAcR,EAAMM,0FCnBvC,MAAaK,EAITC,YAAYC,EAAsBC,EAAaC,EAAaC,GAkDpDC,KAAAC,GAAa,EACbD,KAAAE,GAAa,EACbF,KAAAG,GAAa,EACbH,KAAAI,GAAa,EApDC,iBAAPR,EACPI,KAAKK,eAAeT,GACC,iBAAPA,IACdI,KAAKC,GAAKL,EACVI,KAAKE,GAAKL,EACVG,KAAKG,GAAKL,EACVE,KAAKI,QAAYE,IAAPP,EAAmB,EAAIA,GAIzCQ,UACI,OAAOP,KAAKC,GAEhBO,YACI,OAAOR,KAAKE,GAEhBO,WACI,OAAOT,KAAKG,GAEhBO,YACI,OAAOV,KAAKI,GAEhBG,QAAQI,GACJX,KAAKC,GAAKW,KAAKC,IAAID,KAAKE,IAAIH,EAAK,GAAI,GAEzCH,UAAUG,GACNX,KAAKE,GAAKU,KAAKC,IAAID,KAAKE,IAAIH,EAAK,GAAI,GAEzCF,SAASE,GACLX,KAAKG,GAAKS,KAAKC,IAAID,KAAKE,IAAIH,EAAK,GAAI,GAEzCD,UAAUC,GACNX,KAAKI,GAAKQ,KAAKC,IAAID,KAAKE,IAAIH,EAAK,GAAI,GAGzChB,cACI,MACI,IACAK,KAAKe,UAAUf,KAAKC,IACpBD,KAAKe,UAAUf,KAAKE,IACpBF,KAAKe,UAAUf,KAAKG,IACpBH,KAAKe,UAAUf,KAAKI,IAI5BT,QACI,OAAO,IAAID,EAAMM,KAAKC,GAAID,KAAKE,GAAIF,KAAKG,GAAIH,KAAKI,IAQ7CT,eAAeqB,GAEnB,GADc,kBACJC,KAAKD,GAAM,CACjB,GAAmB,IAAfA,EAAIE,OAMJ,OAJAlB,KAAKC,GAAKkB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,GAC1CpB,KAAKE,GAAKiB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,GAC1CpB,KAAKG,GAAKgB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,QAC1CpB,KAAKI,GAAK,GAEP,GAAmB,IAAfY,EAAIE,OAMX,OAJAlB,KAAKC,GAAKkB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,GAC1CpB,KAAKE,GAAKiB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,GAC1CpB,KAAKG,GAAKgB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,QAC1CpB,KAAKI,GAAKe,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,IAG9C,GAAmB,IAAfJ,EAAIE,OAMJ,OAJAlB,KAAKC,GAAKkB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,IAC1CpB,KAAKE,GAAKiB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,IAC1CpB,KAAKG,GAAKgB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,SAC1CpB,KAAKI,GAAK,GAEP,GAAmB,IAAfY,EAAIE,OAMX,OAJAlB,KAAKC,GAAKkB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,IAC1CpB,KAAKE,GAAKiB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,IAC1CpB,KAAKG,GAAKgB,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,SAC1CpB,KAAKI,GAAKe,SAASH,EAAII,MAAM,EAAG,GAAI,IAAM,KAIlD,MAAMC,MAAM,oCAGR1B,UAAUgB,GACd,MAAMW,EAAMV,KAAKC,IAAID,KAAKE,IAAIF,KAAKW,MAAY,IAANZ,GAAY,GAAI,KAAKa,SAC1D,IAEJ,OAAkB,GAAdF,EAAIJ,OAAoB,IAAMI,EAC3BA,GArGf3E,EAAA+C,QA2GA/C,EAAA8E,UAAA,SACIC,EACAC,EACAC,GAEA,MAAMjE,OAAc2C,IAAVsB,EAAsB,GAAMA,EAChC/E,EAAI,EAAIc,EACd,OAAO,IAAI+B,EACPgC,EAAOnB,IAAM1D,EAAI8E,EAAOpB,IAAM5C,EAC9B+D,EAAOlB,MAAQ3D,EAAI8E,EAAOnB,MAAQ7C,EAClC+D,EAAOjB,KAAO5D,EAAI8E,EAAOlB,KAAO9C,EAChC+D,EAAOhB,MAAQ7D,EAAI8E,EAAOjB,MAAQ/C,mFCtH1C,MAAAkB,EAAApC,EAAA,GACAoF,EAAApF,EAAA,GAeA,MAAMqF,UAAgBjD,EAAMkD,UACxBpC,YAAYZ,GACRiD,MAAMjD,GAMFiB,KAAAiC,WAAa,MACjBjC,KAAKkC,SAAS,CAAEC,OAAO,MAEnBnC,KAAAoC,UAAY,MAChBpC,KAAKkC,SAAS,CAAEC,OAAO,MATvBnC,KAAKqC,MAAQ,CACTF,OAAO,GAWfxC,SACI,IAAI2C,EAAetC,KAAKjB,MAAMuD,MAC1BtC,KAAKjB,MAAMwD,QAAUvC,KAAKjB,MAAMyD,YAChCF,EAAQtC,KAAKjB,MAAMyD,YACZxC,KAAKqC,MAAMF,OAASnC,KAAKjB,MAAM0D,aACtCH,EAAQtC,KAAKjB,MAAM0D,YAGvB,MAAMC,EAA6B,CAC/BC,gBAAiBL,EAAMM,eAE3B,OACI/D,EAAAG,cAAA,OACIO,UACIS,KAAKjB,MAAMwD,OAAS,qBAAuB,cAE/CG,MAAOA,EACPG,QAAS7C,KAAKjB,MAAM8D,QACpBC,aAAc9C,KAAKiC,WACnBc,aAAc/C,KAAKoC,WAEnBvD,EAAAG,cAAA,QAAMO,UAAU,qBAAqBS,KAAKjB,MAAMiE,SAyBhErG,EAAAsG,QAAA,cAA6BpE,EAAMkD,UAC/BpC,YAAYZ,GACRiD,MAAMjD,GAaFiB,KAAAkD,YAAc,CAACC,IACnB,MAAMC,EAASpD,KAAKqC,MAAMgB,KAAKC,KAAKvF,GAAKA,EAAEiF,QAAUG,QACtC7C,IAAX8C,EACApD,KAAKkC,SAAS,CAAEc,MAAO,KAAMO,QAAS,OAEtCvD,KAAKkC,SAAS,CAAEc,MAAOI,EAAOJ,MAAOO,QAASH,EAAOI,aAjBzD,IAAIC,EAA8B,KAC9BJ,EAAOtE,EAAMM,SAASW,KAAKkD,aAC3BG,EAAKnC,OAAS,IACduC,EAAaJ,EAAK,IAEtBrD,KAAKqC,MAAQ,CACTW,MAAOS,EAAWT,MAClBO,QAASE,EAAWD,SACpBH,QAaR1D,SACI,MAAM+D,EAAW7B,EAAAJ,UACbzB,KAAKjB,MAAM4D,gBACX3C,KAAKjB,MAAM4E,aACX,IAEEC,EAAU/B,EAAAJ,UAAUiC,EAAU,IAAI7B,EAAAnC,MAAM,QAAS,IACvD,OACIb,EAAAG,cAAA,OACIO,UAAU,UACVmD,MAAO,CACHC,gBAAiB3C,KAAKjB,MAAM4D,gBAAgBC,gBAGhD/D,EAAAG,cAAA,OAAKO,UAAU,gBACVS,KAAKqC,MAAMgB,KAAKQ,IAAI9F,GACjBc,EAAAG,cAAC8C,EAAO,CACJ1D,IAAKL,EAAEiF,MACPT,OAAQxE,EAAEiF,QAAUhD,KAAKqC,MAAMW,MAC/BA,MAAOjF,EAAEiF,MACTV,MAAOoB,EACPjB,WAAYmB,EACZpB,YAAaxC,KAAKjB,MAAM4E,aACxBd,QAAS,IAAM7C,KAAKkD,YAAYnF,EAAEiF,WAI9CnE,EAAAG,cAAA,OACIO,UAAU,cACVmD,MAAO,CACHC,gBAAiB3C,KAAKjB,MAAM4E,aAAaf,gBAG5C5C,KAAKqC,MAAMkB,SAAW,yGCtI3C,MAAA1E,EAAApC,EAAA,GAQaE,EAAAmH,SAAW,CAAC/E,IACrB,MAAMgF,EAAO,OAAShF,EAAM3B,MAAQ2B,EAAM3B,KAAK4G,SAAS,KAAO,GAAK,QACpE,OACInF,EAAAG,cAAA,OAAKO,UAAU,YACXV,EAAAG,cAAA,OAAKO,UAAU,eAAe0E,IAAKF,sFCZ/C,MAAAlF,EAAApC,EAAA,GAWaE,EAAAuH,iBAAmB,CAACnF,GAC7BF,EAAAG,cAAA,UACIO,UAAU,mBACV4E,MAAOpF,EAAMoF,MACbC,OAAQrF,EAAMqF,OACdC,UAAU,KACVC,YAAY,KACZC,MAAM,WACNN,gFACIlF,EAAMyF,iOCpBlB,MAAA3F,EAAApC,EAAA,GACAgI,EAAAhI,EAAA,GACAiI,EAAAjI,EAAA,GAKaE,EAAAgI,UAAY,CAAC5F,GACtBF,EAAAG,cAAA,OAAKO,UAAU,aACXV,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,WAAYH,EAAM6F,aACpB/F,EAAAG,cAACyF,EAAAI,UAAS,CACNtF,UAAU,gBACV0E,OAAQlF,EAAM6F,sGCZ9B,MAAA/F,EAAApC,EAAA,GAaAE,EAAAkI,UAAA,cAA+BhG,EAAMkD,UACjCpC,YAAYZ,GACRiD,MAAMjD,GAMFiB,KAAA8E,WAAa,MACjB9E,KAAKkC,SAAS,CAAE6C,QAAQ,MANxB/E,KAAKqC,MAAQ,CACT0C,QAAQ,GAQhBpF,SACI,OACId,EAAAG,cAAA,OACIO,UACI,aACCS,KAAKjB,MAAMQ,UAAY,IAAMS,KAAKjB,MAAMQ,UAAY,IAEzD0E,IAAK,OAASjE,KAAKjB,MAAMkF,IACzBE,MAAOnE,KAAKjB,MAAMoF,MAClBC,OAAQpE,KAAKjB,MAAMqF,OACnBY,OAAQhF,KAAK8E,WACbpC,MAAO,CAAEuC,QAASjF,KAAKqC,MAAM0C,OAAS,EAAI,sFCpC1D,MAAAlG,EAAApC,EAAA,GACAyI,EAAAzI,EAAA,IACA0I,EAAA1I,EAAA,IAEAyI,EAAS1B,OAAO3E,EAAAG,cAACmG,EAAAC,KAAI,MAAKC,SAASC,eAAe,wBCJlD1I,EAAAD,QAAA4I,wFCAA,MAAA1G,EAAApC,EAAA,GACA+I,EAAA/I,EAAA,IACAoF,EAAApF,EAAA,GACAgJ,EAAAhJ,EAAA,IACAiJ,EAAAjJ,EAAA,IACAkJ,EAAAlJ,EAAA,IACAmJ,EAAAnJ,EAAA,IACAoJ,EAAApJ,EAAA,GACAqJ,EAAArJ,EAAA,IACAsJ,EAAAtJ,EAAA,IAEaE,EAAAyI,KAAO,KAChBvG,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,OAAKO,UAAU,aACfV,EAAAG,cAAA,OAAKO,UAAU,iBACXV,EAAAG,cAAA,OAAKO,UAAU,YACXV,EAAAG,cAACwG,EAAAS,SAAQ,MACTpH,EAAAG,cAAA,MAAIO,UAAU,cAAY,kBAC1BV,EAAAG,cAAC6G,EAAA5C,QAAO,CACJU,aAAc,IAAI9B,EAAAnC,MAAM,WACxBiD,gBAAiB,IAAId,EAAAnC,MAAM,YAE1B,IAAM,CACH,CACIsD,MAAO,WACPQ,OAAQ,IAAM3E,EAAAG,cAAC+G,EAAAG,QAAO,OAE1B,CACIlD,MAAO,UACPQ,OAAQ,IAAM3E,EAAAG,cAACyG,EAAAU,QAAO,OAE1B,CACInD,MAAO,WACPQ,OAAQ,IAAM3E,EAAAG,cAAC8G,EAAAM,SAAQ,OAE3B,CACIpD,MAAO,sBACPQ,OAAQ,IAAM3E,EAAAG,cAAC0G,EAAAW,kBAAiB,OAEpC,CACIrD,MAAO,oBACPQ,OAAQ,IAAM3E,EAAAG,cAAC2G,EAAAW,iBAAgB,OAEnC,CACItD,MAAO,iBACPQ,OAAQ,IAAM3E,EAAAG,cAAC4G,EAAAW,cAAa,4FC7CxD,MAAA1H,EAAApC,EAAA,GAEaE,EAAAsJ,SAAW,KACpBpH,EAAAG,cAAA,OAAKO,UAAU,YACXV,EAAAG,cAAA,OAAKO,UAAU,eAAe0E,IAAI,kGCJ1C,MAAApF,EAAApC,EAAA,GACAoJ,EAAApJ,EAAA,GACAoF,EAAApF,EAAA,GACA+J,EAAA/J,EAAA,IACAgK,EAAAhK,EAAA,IACAiK,EAAAjK,EAAA,IACAkK,EAAAlK,EAAA,IACAmK,EAAAnK,EAAA,IAEaE,EAAAwJ,QAAU,KACnBtH,EAAAG,cAAC6G,EAAA5C,QAAO,CAACN,gBAAiB,IAAId,EAAAnC,MAAM,QAASiE,aAAc,IAAI9B,EAAAnC,MAAM,SAChE,IAAM,CACH,CAAEsD,MAAO,QAASQ,OAAQ,IAAM3E,EAAAG,cAACwH,EAAAK,aAAY,OAC7C,CAAE7D,MAAO,eAAgBQ,OAAQ,IAAM3E,EAAAG,cAACyH,EAAAK,WAAU,OAClD,CAAE9D,MAAO,iBAAkBQ,OAAQ,IAAM3E,EAAAG,cAAC2H,EAAAI,eAAc,OACxD,CAAE/D,MAAO,WAAYQ,OAAQ,IAAM3E,EAAAG,cAAC0H,EAAAM,SAAQ,OAC5C,CAAEhE,MAAO,eAAgBQ,OAAQ,IAAM3E,EAAAG,cAAC4H,EAAAK,YAAW,yFChB/D,MAAApI,EAAApC,EAAA,GACAyK,EAAAzK,EAAA,GAEaE,EAAAkK,aAAe,KACxBhI,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,2BACAH,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,0BACbH,EAAAG,cAAA,idASJH,EAAAG,cAAA,UACAH,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,yBACbH,EAAAG,cAAA,kkCAgBAH,EAAAG,cAAA,gnBAUAH,EAAAG,cAAA,kXC5CZ,MAAAH,EAAApC,EAAA,GACAyK,EAAAzK,EAAA,GACA0K,EAAA1K,EAAA,GACAiI,EAAAjI,EAAA,GAEaE,EAAAmK,WAAa,KACtBjI,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,+BACAH,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,uBACbH,EAAAG,cAAA,oCACAH,EAAAG,cAAA,0MAKAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,6BACfyB,EAAAG,cAAA,4BACAH,EAAAG,cAAA,qRAMAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,0BACfyB,EAAAG,cAAA,2BACAH,EAAAG,cAAA,4wBAYAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,yBACfyB,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,2BACAH,EAAAG,cAAA,imBAUAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,uBACfyB,EAAAG,cAAA,oEACAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,6BAEnByB,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,gCACAH,EAAAG,cAAA,grBAWAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,8BAEnByB,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,yBACAH,EAAAG,cAAA,kGAESH,EAAAG,cAAA,g4BAaTH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,0BACfyB,EAAAG,cAAA,wBACAH,EAAAG,cAAA,ucAQAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,8BAEnByB,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,qCACAH,EAAAG,cAAA,w3BAeAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,+BACfyB,EAAAG,cAAA,sHAIAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,kCAGvByB,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,iCACbH,EAAAG,cAAA,kEAC2D,IACvDH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,wDAAsD,sLAMpEL,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,sBACfyB,EAAAG,cAAA,gaAOAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,wGC5I3B,MAAAyB,EAAApC,EAAA,GACAyK,EAAAzK,EAAA,GACA0K,EAAA1K,EAAA,GACAiI,EAAAjI,EAAA,GACA2K,EAAA3K,EAAA,GAEaE,EAAAqK,SAAW,KACpBnI,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,sBACAH,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,uBACbH,EAAAG,cAAA,0YAQJH,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,2BACbH,EAAAG,cAAA,wzBAYAH,EAAAG,cAAA,oUAMAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,kBACfyB,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,sEAC+D,IAC3DH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,wDAAsD,0BAExD,qCACuB,IAC/BL,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,6CAA2C,2sBASc,IACnEL,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,kDAAgD,oBAElD,wMAKZL,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,mBAEnByB,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,kFAC2E,IACvEH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,oDAAkD,+XAShEL,EAAAG,cAAA,0PAMAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,mBAEnByB,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,siBASAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,oBAGvByB,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,wCACbH,EAAAG,cAAA,yQAMAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,yBACfyB,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,iJAIAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,uBACfyB,EAAAG,cAACoI,EAAAlD,iBAAgB,CAACM,QAAS,YAAaL,MAAO,IAAKC,OAAQ,MAC5DvF,EAAAG,cAACoI,EAAAlD,iBAAgB,CAACM,QAAS,YAAaL,MAAO,IAAKC,OAAQ,QAGpEvF,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,oCACbH,EAAAG,cAAA,2NAKAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,qBAEnByB,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,0CACbH,EAAAG,cAAA,gpBAUAH,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,qBACfyB,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,qBACfyB,EAAAG,cAACmI,EAAArD,SAAQ,CAAC1G,KAAK,uGCxI3B,MAAAyB,EAAApC,EAAA,GACAyK,EAAAzK,EAAA,GACAiI,EAAAjI,EAAA,GACA4K,EAAA5K,EAAA,IACA6K,EAAA7K,EAAA,IAYaE,EAAAoK,eAAiB,KAC1BlI,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,oCACAH,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,6BACbH,EAAAG,cAAA,UACIH,EAAAG,cAAA,oCAA8BH,EAAAG,cAAA,4BAElCH,EAAAG,cAAA,+CACuCH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,6BAA2B,QAAa,oSAMzFL,EAAAG,cAAA,iaAOAH,EAAAG,cAAA,mDAC2CH,EAAAG,cAAA,gFACVH,EAAAG,cAAA,oHAC0BH,EAAAG,cAAA,mCAA8B,IACrFH,EAAAG,cAAA,uGAGJH,EAAAG,cAACqI,EAAAE,YAAW,KAAED,EAAAE,qBACd3I,EAAAG,cAAA,kCAC0BH,EAAAG,cAAA,0IAG1BH,EAAAG,cAACqI,EAAAE,YAAW,KAAED,EAAAG,oBACd5I,EAAAG,cAAA,mGAIAH,EAAAG,cAACqI,EAAAE,YAAW,KAAED,EAAAI,kBACd7I,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,UACIH,EAAAG,cAAA,6BAAuBH,EAAAG,cAAA,yBAE3BH,EAAAG,cAAA,gBACQH,EAAAG,cAAA,+RAKRH,EAAAG,cAAA,yBACiBH,EAAAG,cAAA,oJAC+D,IAC5EH,EAAAG,cAAA,qEAAgE,IAChEH,EAAAG,cAAA,mGACmBH,EAAAG,cAAA,yFACaH,EAAAG,cAAA,8GAC4B,IAC5DH,EAAAG,cAAA,uEAAkE,IAClEH,EAAAG,cAAA,+BAEJH,EAAAG,cAACqI,EAAAE,YAAW,KAAED,EAAAK,cACd9I,EAAAG,cAAA,4BACoBH,EAAAG,cAAA,yHACkCH,EAAAG,cAAA,mGACgB,IAClEH,EAAAG,cAAA,gCAA0BH,EAAAG,cAAA,mCAA6BH,EAAAG,cAAA,0BAAwB,sDAChCH,EAAAG,cAAA,wHAInDH,EAAAG,cAACqI,EAAAE,YAAW,KAAED,EAAAM,kBAElB/I,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,iBACQH,EAAAG,cAAA,0CAERH,EAAAG,cAAA,iEACyDH,EAAAG,cAAA,2BAAyB,iFACH,IAC3EH,EAAAG,cAAA,4CAAsCH,EAAAG,cAAA,gCAA2B,IACjEH,EAAAG,cAAA,0OAIJH,EAAAG,cAACqI,EAAAE,YAAW,KAAED,EAAAO,oBACdhJ,EAAAG,cAAA,sBACcH,EAAAG,cAAA,oNAE8C,IACxDH,EAAAG,cAAA,6CAAuCH,EAAAG,cAAA,mQAGkB,IACzDH,EAAAG,cAAA,uLAEoBH,EAAAG,cAAA,mHAGxBH,EAAAG,cAACqI,EAAAE,YAAW,KAAED,EAAAQ,yBAElBjJ,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,8BACAH,EAAAG,cAAA,yMAGmCH,EAAAG,cAAA,+RAG4C,IAC3EH,EAAAG,cAAA,+KAEUH,EAAAG,cAAA,wBAEdH,EAAAG,cAACqI,EAAAE,YAAW,KAAED,EAAAS,mBACdlJ,EAAAG,cAAA,6CACqCH,EAAAG,cAAA,0DAC5BH,EAAAG,cAAA,YAAO,yIACqE,IACjFH,EAAAG,cAAA,YAAO,0KAEWH,EAAAG,cAAA,yKAEIH,EAAAG,cAAA,kDAA6C,IACnEH,EAAAG,cAAA,sFAAiF,IACjFH,EAAAG,cAAA,4IACsDH,EAAAG,cAAA,wEACfH,EAAAG,cAAA,uFACMH,EAAAG,cAAA,0HAEzCH,EAAAG,cAAA,8GAC6BH,EAAAG,cAAA,gOAKrCH,EAAAG,cAACqI,EAAAE,YAAW,KAAED,EAAAU,gBAGtBnJ,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,+BACbH,EAAAG,cAAA,yEACkE,IAC9DH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,qCAAmC,+FC7J7D,MAAAL,EAAApC,EAAA,GAMaE,EAAA4K,YAAc,CAACxI,GAExBF,EAAAG,cAAA,OAAKO,UAAU,eAAcV,EAAAG,cAAA,YAAMH,EAAAG,cAAA,WAAMD,EAAMM,aAEtC1C,EAAAsL,QAAU,CAAClJ,GACpBF,EAAAG,cAAA,QAAMO,UAAU,gBAAgBR,EAAMM,WAG7B1C,EAAAuL,KAAO,CAACnJ,GAAsBF,EAAAG,cAAA,QAAMO,UAAU,aAAaR,EAAMM,WAEjE1C,EAAAwL,KAAO,CAACpJ,GAAsBF,EAAAG,cAAA,QAAMO,UAAU,aAAaR,EAAMM,WAEjE1C,EAAAyL,QAAU,CAACrJ,GACpBF,EAAAG,cAAA,QAAMO,UAAU,gBAAgBR,EAAMM,0FCnB7B1C,EAAA6K,oBAAsB,4MAStB7K,EAAA8K,mBAAqB,0LAUrB9K,EAAA+K,iBAAmB,iLAQnB/K,EAAAiL,gBAAkB,qTAalBjL,EAAAgL,aAAe,uNAYfhL,EAAAkL,mBAAqB,4MAQrBlL,EAAAmL,uBAAyB,2jCAgCzBnL,EAAAoL,kBAAoB,+GASpBpL,EAAAqL,aAAe,ihBCrG5B,MAAAnJ,EAAApC,EAAA,GACA2K,EAAA3K,EAAA,GACAiI,EAAAjI,EAAA,GAEM4L,EAAW,CACb,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aAGS1L,EAAAsK,YAAc,KACvBpI,EAAAG,cAAAH,EAAAmH,SAAA,KACKqC,EAASxE,IAAIyE,GACVzJ,EAAAG,cAACoI,EAAAlD,iBAAgB,CAAC9F,IAAKkK,EAAM9D,QAAS8D,EAAMnE,MAAO,IAAKC,OAAQ,OAEpEvF,EAAAG,cAAA,2BACkB,IACdH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,yCAAuC,mHCzB7D,MAAAL,EAAApC,EAAA,GAaaE,EAAA0J,kBAAoB,KAC7BxH,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,gICfR,MAAAH,EAAApC,EAAA,GAIaE,EAAA2J,iBAAmB,KAC5BzH,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,8HCNR,MAAAH,EAAApC,EAAA,GACAoJ,EAAApJ,EAAA,GACAoF,EAAApF,EAAA,GACA8L,EAAA9L,EAAA,IACA+L,EAAA/L,EAAA,IACAgM,EAAAhM,EAAA,IACAiM,EAAAjM,EAAA,IAEaE,EAAA4J,cAAgB,KACzB1H,EAAAG,cAAC6G,EAAA5C,QAAO,CACJU,aAAc,IAAI9B,EAAAnC,MAAM,WACxBiD,gBAAiB,IAAId,EAAAnC,MAAM,YAE1B,IAAM,CACH,CACIsD,MAAO,YACPQ,OAAQ,IAAM3E,EAAAG,cAACuJ,EAAAI,QAAO,OAE1B,CACI3F,MAAO,kBACPQ,OAAQ,IAAM3E,EAAAG,cAAC0J,EAAAE,eAAc,OAEjC,CACI5F,MAAO,uBACPQ,OAAQ,IAAM3E,EAAAG,cAACwJ,EAAAK,oBAAmB,OAEtC,CACI7F,MAAO,gBACPQ,OAAQ,IAAM3E,EAAAG,cAACyJ,EAAAK,aAAY,yFC5B3C,MAAAjK,EAAApC,EAAA,GAUaE,EAAAgM,QAAU,KACnB9J,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,sHCZR,MAAAH,EAAApC,EAAA,GAIaE,EAAAkM,oBAAsB,KAC/BhK,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,iICNR,MAAAH,EAAApC,EAAA,GAIaE,EAAAmM,aAAe,KACxBjK,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,0HCNR,MAAAH,EAAApC,EAAA,GAWaE,EAAAiM,eAAiB,KAC1B/J,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,4HCbR,MAAAH,EAAApC,EAAA,GACAoJ,EAAApJ,EAAA,GACAoF,EAAApF,EAAA,GACAsM,EAAAtM,EAAA,IACAuM,EAAAvM,EAAA,IAEaE,EAAAyJ,SAAW,KACpBvH,EAAAG,cAAC6G,EAAA5C,QAAO,CACJU,aAAc,IAAI9B,EAAAnC,MAAM,WACxBiD,gBAAiB,IAAId,EAAAnC,MAAM,YAE1BuJ,GAAW,CACR,CACIjG,MAAO,QACPQ,OAAQ,IACJ3E,EAAAG,cAAC+J,EAAAG,cAAa,CAACC,YAAa,IAAMF,EAAQ,cAGlD,CACIjG,MAAO,UACPQ,OAAQ,IAAM3E,EAAAG,cAACgK,EAAAI,eAAc,yFCpB7C,MAAAvK,EAAApC,EAAA,GACAyK,EAAAzK,EAAA,GACA4M,EAAA5M,EAAA,GACAgI,EAAAhI,EAAA,GACAiI,EAAAjI,EAAA,GAEM6M,EAAiBvK,GACnBF,EAAAG,cAAA,WACKD,EAAMwK,MAAM1F,IAAI7C,GACbnC,EAAAG,cAACqK,EAAA1E,UAAS,CAACC,MAAO,YAAc5D,EAAK5C,IAAK4C,MASzCrE,EAAAuM,cAAgB,CAACnK,GAC1BF,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,+BACAH,EAAAG,cAAA,4CACqC,IACjCH,EAAAG,cAAA,UAAQ6D,QAAS9D,EAAMoK,aAAW,YAEtCtK,EAAAG,cAACkI,EAAA5H,QAAO,CACJE,OACIX,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,6BACAH,EAAAG,cAAA,gEAIRH,EAAAG,cAACqK,EAAA1E,UAAS,CAACC,MAAM,wBAGrB/F,EAAAG,cAACkI,EAAA5H,QAAO,CACJE,OACIX,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,qCACAH,EAAAG,cAAA,oDAC6C,IACzCH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,gDAA8C,cAEhD,UACJ,IACJL,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,2CAAyC,aAE3C,uiBAaZL,EAAAG,cAAA,YAIRH,EAAAG,cAACsK,EAAa,CACVC,MAAO,CACH,sBACA,OACA,aACA,OACA,MACA,qBAKZ1K,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,oFAEbH,EAAAG,cAACsK,EAAa,CACVC,MAAO,CAAC,QAAS,cAAe,UAAW,8DAEC,IAChD1K,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,4BAA0B,gCAGxCL,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,qEAEbH,EAAAG,cAACsK,EAAa,CACVC,MAAO,CAAC,aAAc,aAAc,aAAc,iBAI1D1K,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,8DAEbH,EAAAG,cAACsK,EAAa,CAACC,MAAO,CAAC,SAAU,aAGrC1K,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,oBAAc,qBAC/BH,EAAAG,cAACsK,EAAa,CAACC,MAAO,CAAC,SAAU,SAAU,SAAU,iBACrD1K,EAAAG,cAACyF,EAAAI,UAAS,CAACZ,IAAI,wBACfpF,EAAAG,cAACyF,EAAAI,UAAS,CAACZ,IAAI,8BACfpF,EAAAG,cAACyF,EAAAI,UAAS,CAACZ,IAAI,yBACfpF,EAAAG,cAACyF,EAAAI,UAAS,CAACZ,IAAI,wGCvGvB,MAAApF,EAAApC,EAAA,GACA4M,EAAA5M,EAAA,GACAiI,EAAAjI,EAAA,GAWM+M,EAAW,CACb,QACA,UACA,aACA,MACA,SACA,cACA,YACA,WACA,SACA,SACA,MACA,kBACA,SACA,SACA,SACA,cACA,QACA,aACA,aACA,aACA,aACA,aACA,MACA,OACA,SACA,UACA,sBACA,OACA,OACA,SACA,WACA,kBACA,aACA,iBACA,OACA,eAGS7M,EAAAyM,eAAiB,KAC1BvK,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,OAAKO,UAAU,YACViK,EAAS3F,IAAI4F,GACV5K,EAAAG,cAACqK,EAAA1E,UAAS,CAACvG,IAAKqL,EAAK7E,MAAO,YAAc6E,MAGlD5K,EAAAG,cAAA,4BACmB,IACfH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,sCAAoC,gHC7D1D,MAAAL,EAAApC,EAAA,GACAoJ,EAAApJ,EAAA,GACAoF,EAAApF,EAAA,GACAiN,EAAAjN,EAAA,IACAkN,EAAAlN,EAAA,IAEaE,EAAAuJ,QAAU,KACnBrH,EAAAG,cAAC6G,EAAA5C,QAAO,CACJU,aAAc,IAAI9B,EAAAnC,MAAM,WACxBiD,gBAAiB,IAAId,EAAAnC,MAAM,YAE1B,IAAM,CACH,CACIsD,MAAO,QACPQ,OAAQ,IAAM3E,EAAAG,cAAC0K,EAAAE,MAAK,OAExB,CACI5G,MAAO,YACPQ,OAAQ,IAAM3E,EAAAG,cAAC2K,EAAAE,SAAQ,yFClBvC,MAAAhL,EAAApC,EAAA,GACAyK,EAAAzK,EAAA,GACAiI,EAAAjI,EAAA,GAaaE,EAAAiN,MAAQ,KACjB/K,EAAAG,cAAA,WACIH,EAAAG,cAAA,8BACAH,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,kBACbH,EAAAG,cAAA,wUAOAH,EAAAG,cAAA,sCAC+B,IAC3BH,EAAAG,cAAA,KAAGC,KAAK,oCAAkC,qDAIlDJ,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,qBACbH,EAAAG,cAAA,kBACUH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,wBAAsB,6GClCtD,MAAAL,EAAApC,EAAA,GACAyK,EAAAzK,EAAA,GACAiI,EAAAjI,EAAA,GAIaE,EAAAkN,SAAW,KACpBhL,EAAAG,cAAAH,EAAAmH,SAAA,KACInH,EAAAG,cAAA,uBACAH,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,wCACPH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,wBAAsB,mBAE1CL,EAAAG,cAACkI,EAAA5H,QAAO,CAACE,OAAQX,EAAAG,cAAA,qBACbH,EAAAG,cAAA,mCACAH,EAAAG,cAAA,g1BAgBAH,EAAAG,cAAA,MAAIO,UAAU,eACVV,EAAAG,cAAA,iBACQH,EAAAG,cAAA,gCAERH,EAAAG,cAAA,4BACAH,EAAAG,cAAA,gCACAH,EAAAG,cAAA,+BACAH,EAAAG,cAAA,8BACAH,EAAAG,cAAA,4BACAH,EAAAG,cAAA,UACIH,EAAAG,cAAA,qCAEJH,EAAAG,cAAA,UACIH,EAAAG,cAAA,8BAEJH,EAAAG,cAAA,sCACAH,EAAAG,cAAA,kCACAH,EAAAG,cAAA,iBACQH,EAAAG,cAAA,sCAERH,EAAAG,cAAA,iBACQH,EAAAG,cAAA,qCAERH,EAAAG,cAAA,oCACAH,EAAAG,cAAA,mCACAH,EAAAG,cAAA,mCAEJH,EAAAG,cAAA,4KAKAH,EAAAG,cAAA,yCACAH,EAAAG,cAAA,qLAKAH,EAAAG,cAAA,MAAIO,UAAU,eACVV,EAAAG,cAAA,kBACAH,EAAAG,cAAA,gBACAH,EAAAG,cAAA,mBACAH,EAAAG,cAAA,qBACAH,EAAAG,cAAA,oBACAH,EAAAG,cAAA,oBACAH,EAAAG,cAAA,kBACAH,EAAAG,cAAA,qBAEJH,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,uDACAH,EAAAG,cAAA,MAAIO,UAAU,eACVV,EAAAG,cAAA,UACIH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,wBAAsB,UAEpCL,EAAAG,cAAA,UACIH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,6BAA2B,SAEzCL,EAAAG,cAAA,UACIH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,2BAAyB,QAEvCL,EAAAG,cAAA,UACIH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,wBAAsB,aAEpCL,EAAAG,cAAA,UACIH,EAAAG,cAAC0F,EAAA5F,KAAI,CAACI,IAAI,0BAAwB,UAEtCL,EAAAG,cAAA,iBACAH,EAAAG,cAAA,mBACAH,EAAAG,cAAA,2BACAH,EAAAG,cAAA,kCAGRH,EAAAG,cAACkI,EAAAzH,WAAU,KACPZ,EAAAG,cAAA,6BACAH,EAAAG,cAAA,UACIH,EAAAG,cAAA,qBACAH,EAAAG,cAAA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","module.exports = React;","import * as React from \"react\";\r\n\r\ninterface Props {\r\n    dst: string;\r\n    children?: React.ReactNode;\r\n}\r\n\r\nexport const Link = (props: Props) => (\r\n    <a href={props.dst} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        {props.children}\r\n    </a>\r\n);\r\n","import * as React from \"react\";\r\n\r\ninterface SectionProps {\r\n    header: React.ReactNode;\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport const Section = (props: SectionProps) => (\r\n    <div className=\"section\">\r\n        <div className=\"section-heading\">\r\n            <div className=\"section-contents\">{props.header}</div>\r\n        </div>\r\n        <div className=\"section-body\">\r\n            <div className=\"section-contents\">{props.children}</div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport const SubSection = (props: { children: React.ReactNode }) => (\r\n    <div className=\"subsection\">{props.children}</div>\r\n);\r\n","export class Color {\r\n    constructor();\r\n    constructor(hexcolor: string);\r\n    constructor(r: number, g: number, b: number, a?: number);\r\n    constructor(x1?: number | string, x2?: number, x3?: number, x4?: number) {\r\n        if (typeof x1 === \"string\") {\r\n            this.parseHexString(x1);\r\n        } else if (typeof x1 === \"number\") {\r\n            this._r = x1;\r\n            this._g = x2;\r\n            this._b = x3;\r\n            this._a = x4 === undefined ? 1 : x4;\r\n        }\r\n    }\r\n\r\n    get red(): number {\r\n        return this._r;\r\n    }\r\n    get green(): number {\r\n        return this._g;\r\n    }\r\n    get blue(): number {\r\n        return this._b;\r\n    }\r\n    get alpha(): number {\r\n        return this._a;\r\n    }\r\n    set red(val: number) {\r\n        this._r = Math.min(Math.max(val, 0), 1);\r\n    }\r\n    set green(val: number) {\r\n        this._g = Math.min(Math.max(val, 0), 1);\r\n    }\r\n    set blue(val: number) {\r\n        this._b = Math.min(Math.max(val, 0), 1);\r\n    }\r\n    set alpha(val: number) {\r\n        this._a = Math.min(Math.max(val, 0), 1);\r\n    }\r\n\r\n    toHexString(): string {\r\n        return (\r\n            \"#\" +\r\n            this.toHexByte(this._r) +\r\n            this.toHexByte(this._g) +\r\n            this.toHexByte(this._b) +\r\n            this.toHexByte(this._a)\r\n        );\r\n    }\r\n\r\n    clone(): Color {\r\n        return new Color(this._r, this._g, this._b, this._a);\r\n    }\r\n\r\n    private _r: number = 0;\r\n    private _g: number = 0;\r\n    private _b: number = 0;\r\n    private _a: number = 1;\r\n\r\n    private parseHexString(str: string) {\r\n        const regex = /^#[0-9a-fA-F]*$/;\r\n        if (regex.test(str)) {\r\n            if (str.length === 4) {\r\n                // #RGB\r\n                this._r = parseInt(str.slice(1, 2), 16) / 15;\r\n                this._g = parseInt(str.slice(2, 3), 16) / 15;\r\n                this._b = parseInt(str.slice(3, 4), 16) / 15;\r\n                this._a = 1;\r\n                return;\r\n            } else if (str.length === 5) {\r\n                // #RGBA\r\n                this._r = parseInt(str.slice(1, 2), 16) / 15;\r\n                this._g = parseInt(str.slice(2, 3), 16) / 15;\r\n                this._b = parseInt(str.slice(3, 4), 16) / 15;\r\n                this._a = parseInt(str.slice(4, 5), 16) / 15;\r\n                return;\r\n            }\r\n            if (str.length === 7) {\r\n                // #RRGGBB\r\n                this._r = parseInt(str.slice(1, 3), 16) / 255;\r\n                this._g = parseInt(str.slice(3, 5), 16) / 255;\r\n                this._b = parseInt(str.slice(5, 7), 16) / 255;\r\n                this._a = 1;\r\n                return;\r\n            } else if (str.length === 9) {\r\n                // #RRGGBBAA\r\n                this._r = parseInt(str.slice(1, 3), 16) / 255;\r\n                this._g = parseInt(str.slice(3, 5), 16) / 255;\r\n                this._b = parseInt(str.slice(5, 7), 16) / 255;\r\n                this._a = parseInt(str.slice(7, 9), 16) / 255;\r\n                return;\r\n            }\r\n        }\r\n        throw Error(\"Invalid hexadecimal color string\");\r\n    }\r\n\r\n    private toHexByte(val: number): string {\r\n        const res = Math.min(Math.max(Math.round(val * 255), 0), 255).toString(\r\n            16\r\n        );\r\n        if (res.length == 1) return \"0\" + res;\r\n        return res;\r\n    }\r\n}\r\n\r\n// linearly mixes all components (included alpha) according to:\r\n// outcolor = color1 * (1 - ratio) + color2 * ratio\r\nexport function linearMix(\r\n    color1: Color,\r\n    color2: Color,\r\n    ratio?: number | undefined\r\n): Color {\r\n    const r = ratio === undefined ? 0.5 : ratio;\r\n    const i = 1 - r;\r\n    return new Color(\r\n        color1.red * i + color2.red * r,\r\n        color1.green * i + color2.green * r,\r\n        color1.blue * i + color2.blue * r,\r\n        color1.alpha * i + color2.alpha * r\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport { Color, linearMix } from \"../../interfaces/Color\";\r\n\r\ninterface TabItemProps {\r\n    readonly color: Color;\r\n    readonly hoverColor?: Color;\r\n    readonly activeColor?: Color;\r\n    readonly active: boolean;\r\n    readonly title: string;\r\n    onClick(): void;\r\n}\r\n\r\ninterface TabItemState {\r\n    readonly hover: boolean;\r\n}\r\n\r\nclass TabItem extends React.Component<TabItemProps, TabItemState> {\r\n    constructor(props: TabItemProps) {\r\n        super(props);\r\n        this.state = {\r\n            hover: false,\r\n        };\r\n    }\r\n\r\n    private startHover = () => {\r\n        this.setState({ hover: true });\r\n    };\r\n    private stopHover = () => {\r\n        this.setState({ hover: false });\r\n    };\r\n\r\n    render() {\r\n        let color: Color = this.props.color;\r\n        if (this.props.active && this.props.activeColor) {\r\n            color = this.props.activeColor;\r\n        } else if (this.state.hover && this.props.hoverColor) {\r\n            color = this.props.hoverColor;\r\n        }\r\n\r\n        const style: React.CSSProperties = {\r\n            backgroundColor: color.toHexString(),\r\n        };\r\n        return (\r\n            <div\r\n                className={\r\n                    this.props.active ? \"tabmenuitem-active\" : \"tabmenuitem\"\r\n                }\r\n                style={style}\r\n                onClick={this.props.onClick}\r\n                onMouseEnter={this.startHover}\r\n                onMouseLeave={this.stopHover}\r\n            >\r\n                <span className=\"tabmenuitem-title\">{this.props.title}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport interface TabProps {\r\n    readonly title: string;\r\n    readonly render: () => React.ReactNode;\r\n}\r\n\r\nexport interface TabMenuProps {\r\n    readonly contentColor: Color;\r\n    readonly backgroundColor: Color;\r\n    readonly children: (\r\n        gotoTab: (tab: string) => void\r\n    ) => ReadonlyArray<TabProps>;\r\n}\r\n\r\ninterface TabMenuState {\r\n    readonly title: string | null;\r\n    readonly content: React.ReactNode | null;\r\n    readonly tabs: ReadonlyArray<TabProps>;\r\n}\r\n\r\nexport class TabMenu extends React.Component<TabMenuProps, TabMenuState> {\r\n    constructor(props: TabMenuProps) {\r\n        super(props);\r\n        let currentTab: TabProps | null = null;\r\n        let tabs = props.children(this.onSelectTab);\r\n        if (tabs.length > 0) {\r\n            currentTab = tabs[0];\r\n        }\r\n        this.state = {\r\n            title: currentTab.title,\r\n            content: currentTab.render(),\r\n            tabs,\r\n        };\r\n    }\r\n\r\n    private onSelectTab = (tab: string) => {\r\n        const theTab = this.state.tabs.find(t => t.title === tab);\r\n        if (theTab === undefined) {\r\n            this.setState({ title: null, content: null });\r\n        } else {\r\n            this.setState({ title: theTab.title, content: theTab.render() });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const tabColor = linearMix(\r\n            this.props.backgroundColor,\r\n            this.props.contentColor,\r\n            0.5\r\n        );\r\n        const lighter = linearMix(tabColor, new Color(\"#fff\"), 0.5);\r\n        return (\r\n            <div\r\n                className=\"tabmenu\"\r\n                style={{\r\n                    backgroundColor: this.props.backgroundColor.toHexString(),\r\n                }}\r\n            >\r\n                <div className=\"tabmenu-list\">\r\n                    {this.state.tabs.map(t => (\r\n                        <TabItem\r\n                            key={t.title}\r\n                            active={t.title === this.state.title}\r\n                            title={t.title}\r\n                            color={tabColor}\r\n                            hoverColor={lighter}\r\n                            activeColor={this.props.contentColor}\r\n                            onClick={() => this.onSelectTab(t.title)}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <div\r\n                    className=\"tab-content\"\r\n                    style={{\r\n                        backgroundColor: this.props.contentColor.toHexString(),\r\n                    }}\r\n                >\r\n                    {this.state.content || \"Please select a tab\"}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\n\r\ninterface ImageProps {\r\n    name: string;\r\n}\r\n\r\n// All images will be looked for in the \"img/\" folder.\r\n// If the image name does not contain a file extension, png will be added by default\r\nexport const BigImage = (props: ImageProps) => {\r\n    const path = \"img/\" + props.name + (props.name.includes(\".\") ? \"\" : \".png\");\r\n    return (\r\n        <div className=\"bigimage\">\r\n            <img className=\"bigimage-img\" src={path} />\r\n        </div>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\n\r\nexport interface SoundCloudPlayerProps {\r\n    readonly trackid: string;\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\n/**\r\n * Wraps an embedded SoundCloud song player\r\n */\r\nexport const SoundCloudPlayer = (props: SoundCloudPlayerProps) => (\r\n    <iframe\r\n        className=\"soundcloudplayer\"\r\n        width={props.width}\r\n        height={props.height}\r\n        scrolling=\"no\"\r\n        frameBorder=\"no\"\r\n        allow=\"autoplay\"\r\n        src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${\r\n            props.trackid\r\n        }&color=%23000000&auto_play=false&hide_related=true&show_comments=false&show_user=true&show_reposts=false&show_teaser=true&visual=true`}\r\n    />\r\n);\r\n","import * as React from \"react\";\r\nimport { LazyImage } from \"./LazyImage\";\r\nimport { Link } from \"./Link\";\r\n\r\n/**\r\n * Requires both \"img/{image}.png\" and \"img/{image}_small.png\" to exist\r\n */\r\nexport const ImageIcon = (props: { image: string }) => (\r\n    <div className=\"pieceicon\">\r\n        <Link dst={`img/${props.image}.png`}>\r\n            <LazyImage\r\n                className=\"pieceicon-img\"\r\n                src={`${props.image}_small.png`}\r\n            />\r\n        </Link>\r\n    </div>\r\n);\r\n","import * as React from \"react\";\r\n\r\ninterface LazyImageProps {\r\n    readonly src: string;\r\n    readonly className?: string;\r\n    readonly width?: number;\r\n    readonly height?: number;\r\n}\r\n\r\ninterface LazyImageState {\r\n    readonly loaded: boolean;\r\n}\r\n\r\nexport class LazyImage extends React.Component<LazyImageProps, LazyImageState> {\r\n    constructor(props: LazyImageProps) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: false,\r\n        };\r\n    }\r\n\r\n    private handleLoad = () => {\r\n        this.setState({ loaded: true });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <img\r\n                className={\r\n                    \"lazyimage\" +\r\n                    (this.props.className ? \" \" + this.props.className : \"\")\r\n                }\r\n                src={\"img/\" + this.props.src}\r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                onLoad={this.handleLoad}\r\n                style={{ opacity: this.state.loaded ? 1 : 0 }}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport * as ReactDom from \"react-dom\";\r\nimport { Main } from \"./components/Main\";\r\n\r\nReactDom.render(<Main />, document.getElementById(\"main\"));\r\n","module.exports = ReactDOM;","import * as React from \"react\";\r\nimport { FaceIcon } from \"./FaceIcon\";\r\nimport { Color } from \"../interfaces/Color\";\r\nimport { Flosion } from \"./Flosion/Flosion\";\r\nimport { RigidBodyDynamics } from \"./RigidBodyDynamics/RigidBodyDynamics\";\r\nimport { CellularAutomata } from \"./CellularAutomata/CellularAutomata\";\r\nimport { OtherProjects } from \"./OtherProjects/OtherProjects\";\r\nimport { TabMenu } from \"./Common/TabMenu\";\r\nimport { Fractals } from \"./Fractals/Fractals\";\r\nimport { AboutMe } from \"./AboutMe/AboutMe\";\r\n\r\nexport const Main = () => (\r\n    <>\r\n        <div className=\"backdrop\" />\r\n        <div className=\"maincontainer\">\r\n            <div className=\"mainbody\">\r\n                <FaceIcon />\r\n                <h1 className=\"mainheader\">Welcome to Tim</h1>\r\n                <TabMenu\r\n                    contentColor={new Color(\"#ffffff\")}\r\n                    backgroundColor={new Color(\"#626289\")}\r\n                >\r\n                    {() => [\r\n                        {\r\n                            title: \"About Me\",\r\n                            render: () => <AboutMe />,\r\n                        },\r\n                        {\r\n                            title: \"Flosion\",\r\n                            render: () => <Flosion />,\r\n                        },\r\n                        {\r\n                            title: \"Fractals\",\r\n                            render: () => <Fractals />,\r\n                        },\r\n                        {\r\n                            title: \"Rigid Body Dynamics\",\r\n                            render: () => <RigidBodyDynamics />,\r\n                        },\r\n                        {\r\n                            title: \"Cellular Automata\",\r\n                            render: () => <CellularAutomata />,\r\n                        },\r\n                        {\r\n                            title: \"Other Projects\",\r\n                            render: () => <OtherProjects />,\r\n                        },\r\n                    ]}\r\n                </TabMenu>\r\n            </div>\r\n        </div>\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\n\r\nexport const FaceIcon = () => (\r\n    <div className=\"faceicon\">\r\n        <img className=\"faceicon-img\" src=\"img/face.jpg\" />\r\n    </div>\r\n);\r\n","import * as React from \"react\";\r\nimport { TabMenu } from \"../Common/TabMenu\";\r\nimport { Color } from \"../../interfaces/Color\";\r\nimport { AboutFlosion } from \"./AboutFlosion\";\r\nimport { HowItWorks } from \"./HowItWorks\";\r\nimport { Examples } from \"./Examples\";\r\nimport { Implementation } from \"./Implementation\";\r\nimport { SongGallery } from \"./SongGallery\";\r\n\r\nexport const Flosion = () => (\r\n    <TabMenu backgroundColor={new Color(\"#fff\")} contentColor={new Color(\"#ddf\")}>\r\n        {() => [\r\n            { title: \"About\", render: () => <AboutFlosion /> },\r\n            { title: \"How It Works\", render: () => <HowItWorks /> },\r\n            { title: \"Implementation\", render: () => <Implementation /> },\r\n            { title: \"Examples\", render: () => <Examples /> },\r\n            { title: \"Song Gallery\", render: () => <SongGallery /> },\r\n        ]}\r\n    </TabMenu>\r\n);\r\n","import * as React from \"react\";\r\nimport { Section } from \"../Common/Section\";\r\n\r\nexport const AboutFlosion = () => (\r\n    <>\r\n        <h1>About Flosion</h1>\r\n        <Section header={<h2>What is it?</h2>}>\r\n            <p>\r\n                Flosion is the tentative name for sound editing software that I've been working on\r\n                in one form or another for a handful of years. Briefly put, it's a visual\r\n                programming language for creating, modifying, and listening to streams of sound. It\r\n                allows the user to compose various effects by building a network, and to listen to\r\n                the results in real-time. Every effect is highly configurable, and can be\r\n                parameterized by nearly anything else in the network.\r\n            </p>\r\n        </Section>\r\n        <p />\r\n        <Section header={<h2>Motivation</h2>}>\r\n            <p>\r\n                I began dreaming about this project when I was trying to use existing digital audio\r\n                workstations like Apple's Logic Pro to create my own synthesizers, effects and\r\n                melodies and put together songs. I had a great deal of fun with these, but many\r\n                out-of-the-box synths and effects are complicated and have limited degrees of\r\n                freedom, which can be overwhelming for a beginner and restrictive for the\r\n                experienced user who wants to change something fundamental. It also seemed\r\n                impossible to make one effect depend on properties of another effect, which was\r\n                something I regularly wanted. Lots of existing music software that I've seen\r\n                provides the user with a timeline, a list of audio tracks to layer over one another\r\n                on this timeline, and a chain of effects to be applied to each track. These effects\r\n                themselves are modular and range from simple, with one or two parameters, to walls\r\n                of buttons, knobs, and detailed graphics. This works well for creating compositions\r\n                and using effects that one already likes, but I wanted to be able to lift the hood\r\n                and re-wire things as I desired.\r\n            </p>\r\n            <p>\r\n                Thus I slowly began developing my own audio software. The beginnings were very slow\r\n                and I'll skip the details by saying that I learned intimately how many things you\r\n                can do wrong in C++. But over time, the more I learned and the more I developed, my\r\n                software took shape and the first few interesting-sounding glitches were then\r\n                followed by recognizable melodies and recreations of effects that I was familiar\r\n                with from elsewhere. There's still a lot I plan to do, but with the foundations\r\n                already in place, I'm hoping Flosion will eventually be good enough to create freely\r\n                with and to share with the community.\r\n            </p>\r\n            <p>\r\n                The end goal is to have software that allows users to play with sounds and create\r\n                music, working at the level of abstraction they desire, and while having the freedom\r\n                to configure anything they wish, all while remaining very expressive, intuitive, and\r\n                unique in its approach.\r\n            </p>\r\n        </Section>\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\nimport { Section, SubSection } from \"../Common/Section\";\r\nimport { BigImage } from \"../Common/BigImage\";\r\nimport { Link } from \"../Common/Link\";\r\n\r\nexport const HowItWorks = () => (\r\n    <>\r\n        <h1>How Flosion Works</h1>\r\n        <Section header={<h2>Overview</h2>}>\r\n            <h4>Data Types and Objects</h4>\r\n            <p>\r\n                In Flosion, there are two data types: sound streams and numbers. There are also\r\n                objects, which produce and consume this data. The two types, naturally, are sound\r\n                objects and number objects.\r\n            </p>\r\n            <BigImage name=\"flosion/numbersandsounds\" />\r\n            <h4>Number Objects</h4>\r\n            <p>\r\n                Number objects have no state. They can only accept numbers as inputs and always\r\n                produce numbers as outputs. These act just familiar mathematical functions. Examples\r\n                of number objects include addition, multiplication, trigonometric functions, and\r\n                numeric constants.\r\n            </p>\r\n            <BigImage name=\"flosion/numberobjects\" />\r\n            <h4>Sound Objects</h4>\r\n            <p>\r\n                Sound objects produce a stream of sound that can be listened to or given to other\r\n                objects as input. Sound objects can also take sound streams as inputs, modifying\r\n                them according to their design, and returning the result as their output. Sound\r\n                objects can additionally accept numbers as inputs, which may control various\r\n                behaviors of the sound object. Finally, sound objects can also produce numbers,\r\n                which typically represent a part of the object's state, which can be used as inputs\r\n                to other objects. Sound objects are allowed to have stateful information that\r\n                changes over time as it produces sound. Many sound objects also expose some of their\r\n                stateful information in the form of number outputs. Some examples include an\r\n                amplifier, an echo effect, or a sound clip.\r\n            </p>\r\n            <BigImage name=\"flosion/soundobjects\" />\r\n            <SubSection>\r\n                <h4>Flow Networks</h4>\r\n                <p>\r\n                    Sound objects and number objects can be wired together ad hoc to create a\r\n                    network. This is done simply by connecting number outputs with number inputs,\r\n                    and sound outputs with sound inputs. In these networks, sound is always flowing\r\n                    in one direction and numbers are flowing in the opposite direction. Why this is\r\n                    so is explained further down. The output of these networks is a sound that can\r\n                    be listened to. For example, one can attach the output of a sound clip object to\r\n                    the input of an amplifier object, to define a network which produces a louder or\r\n                    quieter version of the original sound clip.\r\n                </p>\r\n                <BigImage name=\"flosion/ampnetwork\" />\r\n                <p>Of course, these networks can get far more interesting.</p>\r\n                <BigImage name=\"flosion/morecomplicated\" />\r\n            </SubSection>\r\n            <SubSection>\r\n                <h4>Inputs and Outputs</h4>\r\n                <p>\r\n                    For sending and receiving numbers, there are of number inputs and number\r\n                    outputs. There are also sound ouputs, which produce streams of sound, and sound\r\n                    inputs, which consume them. There are two types of sound inputs, single-inputs\r\n                    and multi-inputs. A sound output that is connected to a single-input always\r\n                    produces a single stream of sound for that input. But a sound output that is\r\n                    connected to a multi-input can produce multiple streams, at the same time. A\r\n                    multi-input always has some known arity, which is a number that generalizes the\r\n                    number of streams it can receive in parallel. A single-input is essentially a\r\n                    special case of a multi-input, with a fixed arity of 1.\r\n                </p>\r\n                <BigImage name=\"flosion/inputsandoutputs\" />\r\n            </SubSection>\r\n            <SubSection>\r\n                <h4>Parallelism</h4>\r\n                <p>\r\n                    Recall that sound objects are allowed to have state. Actually, sound objects can\r\n                    have <i>multiple</i> states at the same time. This is one case where Flosion\r\n                    departs from the physical realm a bit. The reason for this is that sometimes the\r\n                    same sound stream needs to be used in multiple places, and the results want to\r\n                    be heard in real-time. Another reason is the existence of sound multi-inputs,\r\n                    which call upon their inputs multiple times in parallel. Multi-inputs are very\r\n                    useful for creating certain types of sound objects. For example, a synthesizer\r\n                    can be plugged into the multi-input of a sound object that generates a melody\r\n                    from some number of notes notes. The result is that if the melody has n notes,\r\n                    then for every state of the melody generator, there will be an additional n\r\n                    states in the synthesizer. This way, the melody can use the same synthesizer\r\n                    multiple times in parallel to play overlapping notes, without any distortions or\r\n                    conflict from shared state.\r\n                </p>\r\n                <BigImage name=\"flosion/parallelsynth\" />\r\n                <h4>Relativism</h4>\r\n                <p>\r\n                    Another quirk of Flosion is that time is very relative. Some sound objects\r\n                    create delays in the sounds they draw upon, and other sound objects change the\r\n                    speed of time coming from their inputs. This means that when one sound object\r\n                    queries the current time of another sound object, it might see different value\r\n                    and a different speed of time from what it knows. This isn't as big of a problem\r\n                    as it might sound. In practice, it just works out.\r\n                </p>\r\n                <BigImage name=\"flosion/timestretchdelay\" />\r\n            </SubSection>\r\n            <SubSection>\r\n                <h4>The Flow of Information</h4>\r\n                <p>\r\n                    In Flosion, sound streams always flow in one direction, and numbers always flow\r\n                    in the opposite direction. This is necessary because of multi-inputs, which\r\n                    allow one sound object to call upon an input many times in parallel. This means\r\n                    that the parent sound object sees many states in the child sound object, while\r\n                    the child object only ever sees one parent state. Thus it's a bit meaningless\r\n                    for the parent object to ask for stateful information from the child, while it\r\n                    always makes sense for a child to ask for stateful information from a parent. Of\r\n                    course, this restriction doesn't apply for constants and numbers that don't\r\n                    depend on state, but those never change and are a bit boring anyway. Thus,\r\n                    sounds flow up the network, and numbers flow down the network. With both numbers\r\n                    and sound streams, closed loops would cause an infinite recursion, and so are\r\n                    not allowed.\r\n                    {/* TODO: why sound objects need to be connected to share numbers */}\r\n                </p>\r\n                <BigImage name=\"flosion/goodbadconnections\" />\r\n                <p>\r\n                    Finally, an output can be connected to any number of inputs, but every input can\r\n                    have at most one output.\r\n                </p>\r\n                <BigImage name=\"flosion/oneinputmanyoutputs\" />\r\n            </SubSection>\r\n        </Section>\r\n        <Section header={<h2>Abstract Structure</h2>}>\r\n            <p>\r\n                The networks of sound objects in Flosion always form a{\" \"}\r\n                <Link dst=\"https://en.wikipedia.org/wiki/Directed_acyclic_graph\">\r\n                    directed acyclic graph (DAG)\r\n                </Link>\r\n                . Number objects also always connect to form a DAG, though, as discussed above, the\r\n                flow of sound and numbers is always in the opposite direction.\r\n            </p>\r\n            <BigImage name=\"flosion/subgraphs\" />\r\n            <p>\r\n                The states of sound objects are a bit special. Every state has a parent state, and\r\n                every state can have multiple child states. The states of the sound objects thus\r\n                form a tree, and this tree has a similar structure to the overall sound object\r\n                network. Given any sound object, it has one state for every sound single-input it is\r\n                connected to, and n states for every n-adic multi-input it is connected to.\r\n            </p>\r\n            <BigImage name=\"flosion/statetree\" />\r\n        </Section>\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\nimport { Section, SubSection } from \"../Common/Section\";\r\nimport { BigImage } from \"../Common/BigImage\";\r\nimport { Link } from \"../Common/Link\";\r\nimport { SoundCloudPlayer } from \"../Common/SoundCloudPlayer\";\r\n\r\nexport const Examples = () => (\r\n    <>\r\n        <h1>Examples</h1>\r\n        <Section header={<h2>Preamble</h2>}>\r\n            <p>\r\n                Flosion is an ongoing project, and has been for a few years now. Consequently, the\r\n                code base has been through many major overhauls, and the user interface has also\r\n                changed a number of times, and is changing yet again as part of a current code\r\n                update. The abstract structure has remained the same for a long time though, and so\r\n                the various screenshots here are still very relevant.\r\n            </p>\r\n        </Section>\r\n        <Section header={<h2>Basic Setups</h2>}>\r\n            <p>\r\n                This screenshot is of an early version of Flosion, and shows, at the top, two\r\n                numeric constants, X and Y, being passed to an \"Add\" number object, which can be\r\n                seen computing their sum. Below that is another variable, \"X Domain,\" being passed\r\n                through a \"Sine\" object, and into a graphing object. Graphing objects were a very\r\n                useful feature that unfortunately were implemented in a very unsafe and messy way,\r\n                and ways to reintroduce them are under investigation. At the bottom of the image,\r\n                there is the object labeled \"Aaah.wav,\" which is simply a sound object that plays a\r\n                sound file. This object is fed into the \"PlayBack\" object, which simply takes the\r\n                sound stream entering its input and plays the stream to the computer's speakers. The\r\n                result is that one can physically hear a recording of myself shouting.\r\n            </p>\r\n            <p>\r\n                If the font looks weird, it's probably because the glyphs were hand drawn by myself,\r\n                using a pixel art program that I also wrote myself to animate video game characters,\r\n                all because I couldn't figure out how to use standard text rendering APIs. But\r\n                that's a different story from my earlier days as a programmer.\r\n            </p>\r\n            <BigImage name=\"flosion/demo1\" />\r\n            <SubSection>\r\n                <p>\r\n                    In this example, a Filter object is used, which computes a{\" \"}\r\n                    <Link dst=\"https://en.wikipedia.org/wiki/Fast_Fourier_transform\">\r\n                        fast Fourier transform\r\n                    </Link>{\" \"}\r\n                    of its input sound to create a{\" \"}\r\n                    <Link dst=\"https://en.wikipedia.org/wiki/Spectrogram\">spectrogram</Link>. This\r\n                    spectrogram can be used to see how the sound is composed of a distribution of\r\n                    waves of different frequencies and amplitudes. The Filter object can be used to\r\n                    amplify or attenuate these frequencies selectively. It exposes a \"frequency\"\r\n                    number source at its top, which it can change to select a frequency, and it\r\n                    provides an \"amplitude\" number input, which it multiplies individual frequencies\r\n                    by. To modify individual frequencies, one simply needs to define a function of\r\n                    the Filter's frequency and pass it into the \"amplitude\" input. In this\r\n                    screenshot, a bell curve, or Gaussian distribution, is used to silence all but a\r\n                    narrow range of frequency components. The overall result is that a{\" \"}\r\n                    <Link dst=\"https://en.wikipedia.org/wiki/Band-pass_filter\">\r\n                        band-pass filter\r\n                    </Link>{\" \"}\r\n                    is applied to the sound stream. Band-pass filters are a fairly common effect in\r\n                    digital music production, and can be used for things like isolating vocals or\r\n                    bass from a larger piece of audio.\r\n                </p>\r\n                <BigImage name=\"flosion/demo2\" />\r\n            </SubSection>\r\n            <SubSection>\r\n                <p>\r\n                    Here, we see a NoteGen object being used. This object is essentially a{\" \"}\r\n                    <Link dst=\"https://en.wikipedia.org/wiki/Function_generator\">\r\n                        function generator\r\n                    </Link>\r\n                    , which produces some periodic signal at a specified frequency. The NoteGen\r\n                    object exposes a \"phase\" number output, visible on its top edge, and accepts a\r\n                    \"wave function\" input. By defining the wave function input to be any desirable\r\n                    function the phase, the user can create any wave form they choose. The wave\r\n                    function chose here is the canonical sine wave.\r\n                </p>\r\n                <p>\r\n                    The frequency at which this wave form is played in the output sound is\r\n                    determined by the \"frequency\" number input, which is being given the constant\r\n                    value of 250 Hz here. The end result of this setup is a simple sine-wave tone of\r\n                    250 Hz.\r\n                </p>\r\n                <BigImage name=\"flosion/demo3\" />\r\n            </SubSection>\r\n            <SubSection>\r\n                <p>\r\n                    Here, the NoteGen object is used in tandem with the Sampler object. The Sampler\r\n                    object is used to define a melody. The vertical axis denotes note pitch, and the\r\n                    horizontal axis denotes time. Essentially, it represents sheet music, but\r\n                    without all the swirls and lines and other complex rules. The Sampler uses a\r\n                    multi-input so that it can call upon its input many times in parallel, which it\r\n                    needs to do when its notes overlap in time. This example thus plays a sine-wave\r\n                    melody which is defined by the notes drawn on the Sampler object.\r\n                </p>\r\n                <BigImage name=\"flosion/demo4\" />\r\n            </SubSection>\r\n        </Section>\r\n        <Section header={<h2>More Complicated Examples</h2>}>\r\n            <p>\r\n                Here's what it can look like when bigger networks of sounds and numbers are put\r\n                together. It can get messy quickly, which is why the next major version of Flosion\r\n                will include new ways to encapsulate sub-networks and hide the small details when\r\n                needed.\r\n            </p>\r\n            <BigImage name=\"flosion/franklyamess\" />\r\n            <SubSection>\r\n                <p>\r\n                    The following setup was used as-is to create a pair of recorded songs. The songs\r\n                    themselves can be listened to below the screenshot.\r\n                </p>\r\n                <BigImage name=\"flosion/simplesong\" />\r\n                <SoundCloudPlayer trackid={\"275870851\"} width={300} height={300} />\r\n                <SoundCloudPlayer trackid={\"275870658\"} width={300} height={300} />\r\n            </SubSection>\r\n        </Section>\r\n        <Section header={<h2>More Graphing Objects</h2>}>\r\n            <p>\r\n                In previous versions where graphing objects still existed, 2D graphing objects could\r\n                also be used, and were very useful for visualizing multi-dimensional things like\r\n                filter functions that changed over time.\r\n            </p>\r\n            <BigImage name=\"flosion/2dgraph\" />\r\n        </Section>\r\n        <Section header={<h2>A Quick Note on the Sampler</h2>}>\r\n            <p>\r\n                In more recent versions of Flosion, I've been working to allow the notes of a\r\n                Sampler object to be far more customizable than those of comparable note sequencers\r\n                in other music software. Firstly, notes can change frequency on the fly, as shown in\r\n                the first example. Second, notes can be parameterized by adding any number of\r\n                numeric values that change as desired over the course of the note's lifetime. These\r\n                parameters are very useful for creating truly customized melodies and effects, and\r\n                help to give back some creative freedoms, like dynamically modifying the timbre of\r\n                instrument, which is otherwise lost when making music on a computer.\r\n            </p>\r\n            <BigImage name=\"flosion/sampler1\" />\r\n            <BigImage name=\"flosion/sampler2\" />\r\n            <BigImage name=\"flosion/sampler3\" />\r\n        </Section>\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\nimport { Section, SubSection } from \"../Common/Section\";\r\nimport { Link } from \"../Common/Link\";\r\nimport { CodeSnippet } from \"../Common/CodeSyntax\";\r\nimport {\r\n    NumberSourceSnippet,\r\n    AddObjectSnippet,\r\n    NumberInputSnippet,\r\n    SoundSourceSnippet,\r\n    SoundSourceBaseSnippet,\r\n    StateSnippet,\r\n    StatefulSnippet,\r\n    AudioStateSnippet,\r\n    AudioSnippet,\r\n} from \"./Snippets\";\r\n\r\nexport const Implementation = () => (\r\n    <>\r\n        <h1>How Flosion Is Written</h1>\r\n        <Section header={<h2>Implementation</h2>}>\r\n            <h4>\r\n                <code>NumberSource</code> and <code>NumberInput</code>\r\n            </h4>\r\n            <p>\r\n                Flosion is written in C++ and uses <Link dst=\"https://www.sfml-dev.org/\">SFML</Link>{\" \"}\r\n                for drawing, playing sounds, handling user input and managing windows. Additionally,\r\n                Flosion uses a GUI library that I wrote myself and have used for other projects,\r\n                which is very much inspired by HTML and its JavaScript interface. The GUI is also\r\n                written in modern C++ and uses SFML.\r\n            </p>\r\n            <p>\r\n                The source code makes heavy use of inheritance and templates. Inheritance is used to\r\n                provide a generic interface for sound and number objects to communicate, while\r\n                templates are used to avoid boilerplate and preserve type-safety. The code shown\r\n                here is stripped down significantly, and in the actual source code, a lot of\r\n                book-keeping methods are necessary, which are not needed to understand the basics.\r\n            </p>\r\n            <p>\r\n                Here are the essentials details of the <code>NumberSource</code> class, which every\r\n                number object inherits from. <code>evaluate()</code> is a polymorphic function that\r\n                number objects override to compute whatever they like. <code>dependencies</code> and{\" \"}\r\n                <code>dependants</code> represent the objects that are directly connected as inputs\r\n                and outputs.\r\n            </p>\r\n            <CodeSnippet>{NumberSourceSnippet}</CodeSnippet>\r\n            <p>\r\n                Another class, called <code>NumberInput</code>, is used to connect to any number\r\n                object and get its value, or some default value if nothing is connected.\r\n            </p>\r\n            <CodeSnippet>{NumberInputSnippet}</CodeSnippet>\r\n            <p>\r\n                Using both of these classes, the 'Add' number object can be now implemented like\r\n                this:\r\n            </p>\r\n            <CodeSnippet>{AddObjectSnippet}</CodeSnippet>\r\n            <SubSection>\r\n                <h4>\r\n                    <code>State</code> and <code>Stateful</code>\r\n                </h4>\r\n                <p>\r\n                    The <code>state</code> parameter is used to record the current context, and\r\n                    represents a path in the state tree. It can be used to get the (relative)\r\n                    current time, and is needed by stateful number sources (which live inside sound\r\n                    objects) to retrieve the correct stateful information.\r\n                </p>\r\n                <p>\r\n                    Below is the <code>State</code> class, which is the base class of every type of\r\n                    state. It simply stores a pointer to its parent state, and a pointer to the{\" \"}\r\n                    <code>Stateful</code>object that owns this state. A polymorphic{\" \"}\r\n                    <code>reset()</code> function is used to restore states to their original\r\n                    condition. Derived <code>State</code> types are used to hold whatever\r\n                    time-sensitive information that <code>Stateful</code> objects need to store.\r\n                    Rather than storing stateful data through instance members,{\" \"}\r\n                    <code>Stateful</code> objects will use many instances of a custom{\" \"}\r\n                    <code>State</code> type.\r\n                </p>\r\n                <CodeSnippet>{StateSnippet}</CodeSnippet>\r\n                <p>\r\n                    And here is the <code>Stateful</code> base class, which represents any type that\r\n                    stores stateful information in some collection of <code>State</code> objects.\r\n                    The details of how this is done varies by sub-class. For example,{\" \"}\r\n                    <code>SoundSource</code>, <code>SingleInput</code> and <code>MultiInput</code>{\" \"}\r\n                    all store states slightly differently, but the <code>Stateful</code> class is\r\n                    common interface shared by all, which makes sorting out dependencies much\r\n                    simpler.\r\n                </p>\r\n                <CodeSnippet>{StatefulSnippet}</CodeSnippet>\r\n            </SubSection>\r\n            <SubSection>\r\n                <h4>\r\n                    The <code>SoundSource</code> Base Class\r\n                </h4>\r\n                <p>\r\n                    Every type of sound object is represented by a basic <code>SoundSource</code>{\" \"}\r\n                    base class. Since every sound object needs to manage stateful information,{\" \"}\r\n                    <code>SoundSource</code> derives from <code>Stateful</code>. The{\" \"}\r\n                    <code>getNextChunk</code> method is used to fetch up-to-date snippets of sound\r\n                    information from the sound object, and by calling this method rapidly and\r\n                    regularly, a stream is created which contains real-time audio information.\r\n                </p>\r\n                <CodeSnippet>{SoundSourceSnippet}</CodeSnippet>\r\n                <p>\r\n                    While the <code>SoundSource</code> class is simple enough to be used generically\r\n                    by any kind of sound input, it doesn't concern itself with how it stores states\r\n                    or even what kind of state it works with. This is where{\" \"}\r\n                    <code>SoundSourceBase</code> comes in. <code>SoundSourceBase</code> exists to\r\n                    automatically manage creating, updating, and retrieving states of any type. This\r\n                    class exists for the convenience and safety of not having to do this tedious\r\n                    work for each new sound object type. The class overrides{\" \"}\r\n                    <code>SoundSource::getNextChunk()</code>, which provides only weakly-typed state\r\n                    information, and retrieves its own, strongly-typed internal state, which is\r\n                    provided to the new <code>renderChunk()</code>, which, in derived sound object\r\n                    classes, does the actual work of producing sound.\r\n                </p>\r\n                <CodeSnippet>{SoundSourceBaseSnippet}</CodeSnippet>\r\n            </SubSection>\r\n            <SubSection>\r\n                <h4>Concrete Example</h4>\r\n                <p>\r\n                    All the above code, and much more code that isn't being shown, exist to make\r\n                    implementing new sound object far simpler and less error-prone than it otherwise\r\n                    would be. In this example, the <code>Audio</code> class is implemented, which is\r\n                    a sound object that simply loads a sound from a file and produces this sound as\r\n                    its output. To make do this, only two things are needed. One needs to define\r\n                    what information it stores as part of its state, which is done here in the{\" \"}\r\n                    <code>AudioState</code> class. In this case, the only state that's needed is an\r\n                    index into where in the audio file we're currently listening from, which shall\r\n                    be called <code>pos</code>.\r\n                </p>\r\n                <CodeSnippet>{AudioStateSnippet}</CodeSnippet>\r\n                <p>\r\n                    Finally, one needs to define the <code>Audio</code> class itself, which derives\r\n                    from <code>{\"SoundSourceBase<AudioState>\"}</code>, so that all stateful\r\n                    information and dependencies and so on are perfectly and implicitly managed. The{\" \"}\r\n                    <code>{\"SoundSourceBase<AudioState>::renderChunk()\"}</code> method is overridden\r\n                    to do the actual work of playing the sound. The implementation isn't shown here,\r\n                    since it's mostly <code>for</code>-loops and and sample frequency calculations\r\n                    and audio channel checks, but all it does is copy the current part of the audio\r\n                    clip into the current <code>SoundChunk</code> of the stream, using{\" \"}\r\n                    <code>state.pos</code> for book-keeping. This audio clip itself is stored in the{\" \"}\r\n                    <code>soundbuffer</code> member. Note that this piece of sound information will\r\n                    always be the same, no matter who's listening to this <code>Audio</code> object,\r\n                    and therefore, it is not stored in the <code>AudioState</code> type. As an\r\n                    extra, this class also defines and exposes a <code>current_time</code> member,\r\n                    which is a special kind of number source that is associated with the state of\r\n                    the <code>Audio</code> object. This number source can be used to query the\r\n                    (subjective) current time of the <code>Audio</code> object. As you can see, this\r\n                    work, which is complicated and delicate at heart, is handled well by templates\r\n                    and inheritance, and the code needed to implement new and interesting features\r\n                    is minimal.\r\n                </p>\r\n                <CodeSnippet>{AudioSnippet}</CodeSnippet>\r\n            </SubSection>\r\n        </Section>\r\n        <Section header={<h2>Full Source Code</h2>}>\r\n            <p>\r\n                The Flosion source code is stored on github, and can be found{\" \"}\r\n                <Link dst=\"https://github.com/timstr/Flosion\">here</Link>.\r\n            </p>\r\n        </Section>\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\n\r\ninterface ChildProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport const CodeSnippet = (props: ChildProps) =>\r\n    // prettier-ignore\r\n    <div className=\"codesnippet\"><code><pre>{props.children}</pre></code></div>;\r\n\r\nexport const KeyWord = (props: ChildProps) => (\r\n    <span className=\"code-keyword\">{props.children}</span>\r\n);\r\n\r\nexport const Type = (props: ChildProps) => <span className=\"code-type\">{props.children}</span>;\r\n\r\nexport const Name = (props: ChildProps) => <span className=\"code-name\">{props.children}</span>;\r\n\r\nexport const Comment = (props: ChildProps) => (\r\n    <span className=\"code-comment\">{props.children}</span>\r\n);\r\n","export const NumberSourceSnippet = `struct NumberSource {\r\n    virtual float evaluate(const State* state) = 0;\r\n\r\nprivate:\r\n    Stateful* const parent;\r\n    std::vector<Stateful*> dependencies;\r\n    std::vector<Stateful*> dependants;\r\n};`;\r\n\r\nexport const NumberInputSnippet = `struct NumberInput {\r\n\r\n    void setSource(NumberSource* _source);\r\n\r\n    float getValue(const State* state, float default_value = 0) const;\r\n\r\nprivate:\r\n    NumberSource* source;\r\n};`;\r\n\r\nexport const AddObjectSnippet = `struct Add {\r\n    float evaluate(const State* state) override {\r\n        return input1.getValue(state) + input2.getValue(state);\r\n    }\r\n\r\n    NumberInput input1, input2;\r\n};`;\r\n\r\nexport const StatefulSnippet = `struct Stateful {\r\n    virtual ~Stateful();\r\n\r\n    virtual double getTimeSpeed(const State* state_chain) const;\r\n\r\n    uint32_t getTime(const State* state_chain) const;\r\n\r\n    virtual std::size_t numStates() const = 0;\r\n\r\n    std::vector<Stateful*> dependencies;\r\n    std::vector<Stateful*> dependants;\r\n};`;\r\n\r\nexport const StateSnippet = `struct State {\r\n    State(const State* _parent, const Stateful* _owner);\r\n    virtual ~State();\r\n\r\n    virtual void reset() = 0;\r\n\r\nprivate:\r\n\r\n    const State* const parent;\r\n    const Stateful* const owner;\r\n};`;\r\n\r\nexport const SoundSourceSnippet = `struct SoundSource : Stateful {\r\n\r\n    virtual void getNextChunk(SoundChunk& chunk, const State* dependant_state, const Stateful* dst) = 0;\r\n\r\nprotected:\r\n    std::vector<SoundInput*> destinations;\r\n};`;\r\n\r\nexport const SoundSourceBaseSnippet = `template <class StateType>\r\nstruct SoundSourceBase : SoundSource {\r\n\r\n    void getNextChunk(SoundChunk& chunk, const State* parent_state, const Stateful* dst) override {\r\n        StateType& state = lookupState(parent_state, dst);\r\n        renderChunk(chunk, state);\r\n    }\r\n\r\n    virtual void renderChunk(SoundChunk& chunk, StateType& state) = 0;\r\n\r\n    template <typename SoundSourceType = SoundSource>\r\n    struct StateNumberSource : NumberSource {\r\n\r\n        float evaluate(const State* state) const override;\r\n\r\n        virtual float getValue(const StateType& state, const State* context) const = 0;\r\n    };\r\n\r\nprivate:\r\n\r\n    StateType& lookupState(const State* parent_state, const Stateful* dependant) {\r\n        auto it = state_map.find(std::make_pair(parent_state, dependant));\r\n        if (it == state_map.end()) {\r\n            throw std::runtime_error(\"The parent state could not be found in the state map\");\r\n        } else {\r\n            return it->second;\r\n        }\r\n    }\r\n\r\n    std::unordered_map<std::pair<const State*, const Stateful*>, StateType> state_map;\r\n};`;\r\n\r\nexport const AudioStateSnippet = `struct AudioState : State {\r\n\r\n    void reset() override {\r\n        pos = 0;\r\n    }\r\n\r\n    uint64_t pos;\r\n};`;\r\n\r\nexport const AudioSnippet = `struct Audio : SoundSourceBase<AudioState> {\r\n\r\n    void loadFromFile(std::string filename);\r\n\r\n    void renderChunk(SoundChunk& chunk, AudioState& state) override;\r\n\r\n    struct CurrentTime : StateNumberSource<Audio> {\r\n        float getValue(const AudioState& state, const State* context) const override {\r\n            return state->pos / (float)SAMPLE_FREQUENCY;\r\n        }\r\n    } current_time;\r\n\r\nprivate:\r\n    sf::SoundBuffer soundbuffer;\r\n};`;\r\n","import * as React from \"react\";\r\nimport { SoundCloudPlayer } from \"../Common/SoundCloudPlayer\";\r\nimport { Link } from \"../Common/Link\";\r\n\r\nconst PlayList = [\r\n    \"362396984\", // Black sands exerpt\r\n    \"352281611\", // Suite 03\r\n    \"352281068\", // Suite 02\r\n    \"275723029\", // suite 01\r\n    \"317720529\", // Time-stretched compilation\r\n    \"293278142\", // beansprout echoes\r\n    \"275870851\", // simple chords\r\n    \"275870658\", // simple chords, take 2\r\n    \"271523671\", // a lesson in FM synthesis\r\n    \"315647927\", // sauntering through many different waveforms\r\n    \"267075861\", // sentimental saunter\r\n];\r\n\r\nexport const SongGallery = () => (\r\n    <>\r\n        {PlayList.map(song => (\r\n            <SoundCloudPlayer key={song} trackid={song} width={500} height={200} />\r\n        ))}\r\n        <div>\r\n            More songs at{\" \"}\r\n            <Link dst=\"https://soundcloud.com/timstraubinger\">soundcloud.com/timstraubinger</Link>\r\n        </div>\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\n\r\n/**\r\n * TODO:\r\n *  - explanation, organize into sections\r\n *  - cite papers\r\n *  - platformer game\r\n *  - screenshots\r\n *  - videos\r\n *  - implementation details\r\n *  - github link\r\n */\r\n\r\nexport const RigidBodyDynamics = () => (\r\n    <>\r\n        <h1>Rigid Body Dynamics</h1>\r\n        Coming soon\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\n\r\n// TODO: explanation, discrete, continuous, screenshots, videos\r\n\r\nexport const CellularAutomata = () => (\r\n    <>\r\n        <h1>Cellular Automata</h1>\r\n        Coming soon\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\nimport { TabMenu } from \"../Common/TabMenu\";\r\nimport { Color } from \"../../interfaces/Color\";\r\nimport { TimsGUI } from \"./TimsGUI\";\r\nimport { GibberishGenerators } from \"./GibberishGenerators\";\r\nimport { RandomThings } from \"./RandomThings\";\r\nimport { PlatformerGame } from \"./PlatformerGame\";\r\n\r\nexport const OtherProjects = () => (\r\n    <TabMenu\r\n        contentColor={new Color(\"#FFFF66\")}\r\n        backgroundColor={new Color(\"#FFFFFF\")}\r\n    >\r\n        {() => [\r\n            {\r\n                title: \"Tim's GUI\",\r\n                render: () => <TimsGUI />,\r\n            },\r\n            {\r\n                title: \"Platformer Game\",\r\n                render: () => <PlatformerGame />,\r\n            },\r\n            {\r\n                title: \"Gibberish Generators\",\r\n                render: () => <GibberishGenerators />,\r\n            },\r\n            {\r\n                title: \"Random Things\",\r\n                render: () => <RandomThings />,\r\n            },\r\n        ]}\r\n    </TabMenu>\r\n);\r\n","import * as React from \"react\";\r\n\r\n/**\r\n * TODO:\r\n *  - explanation, design overview\r\n *  - brief history\r\n *  - inspiration from HTML / CSS\r\n *  - github link\r\n */\r\n\r\nexport const TimsGUI = () => (\r\n    <>\r\n        <h1>Tim's GUI</h1>\r\n        Coming soon\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\n\r\n// TODO: explain, include samples\r\n\r\nexport const GibberishGenerators = () => (\r\n    <>\r\n        <h1>Gibberish generators</h1>\r\n        Coming soon\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\n\r\n// TODO: screenshots / videos of random fun things with some explanation\r\n\r\nexport const RandomThings = () => (\r\n    <>\r\n        <h1>Random things</h1>\r\n        Coming soon\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\n\r\n/**\r\n * TODO:\r\n *  - brief history, motivation\r\n *  - design goals (rigid body physics, FSA creature AI)\r\n *  - implementation details\r\n *  - screenshots, videos\r\n *  - github link\r\n */\r\n\r\nexport const PlatformerGame = () => (\r\n    <>\r\n        <h1>Platformer Game</h1>\r\n        Coming soon\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\nimport { TabMenu } from \"../Common/TabMenu\";\r\nimport { Color } from \"../../interfaces/Color\";\r\nimport { AboutFractals } from \"./AboutFractals\";\r\nimport { FractalGallery } from \"./FractalGallery\";\r\n\r\nexport const Fractals = () => (\r\n    <TabMenu\r\n        contentColor={new Color(\"#99FFBB\")}\r\n        backgroundColor={new Color(\"#FFFFFF\")}\r\n    >\r\n        {gotoTab => [\r\n            {\r\n                title: \"About\",\r\n                render: () => (\r\n                    <AboutFractals gotoGallery={() => gotoTab(\"Gallery\")} />\r\n                ),\r\n            },\r\n            {\r\n                title: \"Gallery\",\r\n                render: () => <FractalGallery />,\r\n            },\r\n        ]}\r\n    </TabMenu>\r\n);\r\n","import * as React from \"react\";\r\nimport { Section } from \"../Common/Section\";\r\nimport { ImageIcon } from \"../Common/ImageIcon\";\r\nimport { LazyImage } from \"../Common/LazyImage\";\r\nimport { Link } from \"../Common/Link\";\r\n\r\nconst FractalImages = (props: { names: string[] }) => (\r\n    <div>\r\n        {props.names.map(str => (\r\n            <ImageIcon image={\"fractals/\" + str} key={str} />\r\n        ))}\r\n    </div>\r\n);\r\n\r\ninterface Props {\r\n    gotoGallery(): void;\r\n}\r\n\r\nexport const AboutFractals = (props: Props) => (\r\n    <>\r\n        <h1>About my fractals</h1>\r\n        <p>\r\n            More images are available in the{\" \"}\r\n            <button onClick={props.gotoGallery}>gallery</button>\r\n        </p>\r\n        <Section\r\n            header={\r\n                <>\r\n                    <h2>A Brief History</h2>\r\n                    <p>I was born, once. Later, I made my first fractal.</p>\r\n                </>\r\n            }\r\n        >\r\n            <ImageIcon image=\"fractals/fractalui\" />\r\n        </Section>\r\n\r\n        <Section\r\n            header={\r\n                <>\r\n                    <h2>2D Fractals (in colour)</h2>\r\n                    <p>\r\n                        The fractals here are various hybrids of{\" \"}\r\n                        <Link dst=\"https://en.wikipedia.org/wiki/Mandelbrot_set\">\r\n                            Mandelbrot\r\n                        </Link>{\" \"}\r\n                        and{\" \"}\r\n                        <Link dst=\"https://en.wikipedia.org/wiki/Mandelbox\">\r\n                            mandelbox\r\n                        </Link>{\" \"}\r\n                        fractals, with a variety of other transformations thrown\r\n                        into the fractal algorithm. To produce these, a simple\r\n                        function is defined that maps points in 2D space to\r\n                        other points. For every point in the image, this\r\n                        function is applied repeatedly, until it either grows\r\n                        too large or some maximum number of iterations is\r\n                        reached. The number of iterations is then used to choose\r\n                        a colour from gradient. While the exact choice of\r\n                        transformations and colours allows for an enormous\r\n                        amount of customizability, the results are often very\r\n                        unpredictable.\r\n                    </p>\r\n                    <p />\r\n                </>\r\n            }\r\n        >\r\n            <FractalImages\r\n                names={[\r\n                    \"particleaccelerator\",\r\n                    \"tree\",\r\n                    \"berryshake\",\r\n                    \"rose\",\r\n                    \"eye\",\r\n                    \"toroidalvortex\",\r\n                ]}\r\n            />\r\n        </Section>\r\n\r\n        <Section header={<h2>2D Fractals (with texture)</h2>}>\r\n            UV mapping using curvature and amplitude\r\n            <FractalImages\r\n                names={[\"algae\", \"cauliflower\", \"oilfilm\", \"saturn\"]}\r\n            />\r\n            For comparison, two of these are textured using{\" \"}\r\n            <Link dst=\"img/fractals/seaweed.png\">this picture of seaweed</Link>.\r\n        </Section>\r\n\r\n        <Section header={<h2>3D Fractals</h2>}>\r\n            Using CPU. Oh I did not sleep that night\r\n            <FractalImages\r\n                names={[\"mandelbox4\", \"mandelbox3\", \"mandelbox1\", \"mandelbox2\"]}\r\n            />\r\n        </Section>\r\n\r\n        <Section header={<h2>3D Fractals (GLSL)</h2>}>\r\n            Blinn-Phong shading maybe?\r\n            <FractalImages names={[\"glbox1\", \"glbox2\"]} />\r\n        </Section>\r\n\r\n        <Section header={<h2>Other</h2>}>mostly cubes here</Section>\r\n        <FractalImages names={[\"cubes1\", \"cubes2\", \"octree\", \"voxelplanet\"]} />\r\n        <LazyImage src=\"fractals/flying.gif\" />\r\n        <LazyImage src=\"fractals/fovsilliness.gif\" />\r\n        <LazyImage src=\"fractals/gooflow.gif\" />\r\n        <LazyImage src=\"fractals/orbit.gif\" />\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\nimport { ImageIcon } from \"../Common/ImageIcon\";\r\nimport { Link } from \"../Common/Link\";\r\n\r\n/**\r\n * TODO:\r\n *  - explanation\r\n *  - organize by topic\r\n *  - talk about software used\r\n *  - screenshots\r\n *  - include gifs\r\n */\r\n\r\nconst Pictures = [\r\n    \"algae\",\r\n    \"alveoli\",\r\n    \"berryshake\",\r\n    \"box\",\r\n    \"buddha\",\r\n    \"cauliflower\",\r\n    \"clockwork\",\r\n    \"contrail\",\r\n    \"cubes1\",\r\n    \"cubes2\",\r\n    \"eye\",\r\n    \"flyingmountains\",\r\n    \"gasbox\",\r\n    \"glbox1\",\r\n    \"glbox2\",\r\n    \"greensponge\",\r\n    \"hydra\",\r\n    \"ironsprout\",\r\n    \"mandelbox1\",\r\n    \"mandelbox2\",\r\n    \"mandelbox3\",\r\n    \"mandelbox4\",\r\n    \"map\",\r\n    \"mau5\",\r\n    \"octree\",\r\n    \"oilfilm\",\r\n    \"particleaccelerator\",\r\n    \"rose\",\r\n    \"sand\",\r\n    \"saturn\",\r\n    \"skullraa\",\r\n    \"spongeheirarchy\",\r\n    \"teddytoast\",\r\n    \"toroidalvortex\",\r\n    \"tree\",\r\n    \"voxelplanet\",\r\n];\r\n\r\nexport const FractalGallery = () => (\r\n    <>\r\n        <div className=\"fractals\">\r\n            {Pictures.map(img => (\r\n                <ImageIcon key={img} image={\"fractals/\" + img} />\r\n            ))}\r\n        </div>\r\n        <div>\r\n            More images at{\" \"}\r\n            <Link dst=\"https://timstraubinger.tumblr.com/\">\r\n                timstraubinger.tumblr.com/\r\n            </Link>\r\n        </div>\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\nimport { TabMenu } from \"../Common/TabMenu\";\r\nimport { Color } from \"../../interfaces/Color\";\r\nimport { Intro } from \"./Intro\";\r\nimport { MySkills } from \"./MySkills\";\r\n\r\nexport const AboutMe = () => (\r\n    <TabMenu\r\n        contentColor={new Color(\"#f8ffd0\")}\r\n        backgroundColor={new Color(\"#ffffff\")}\r\n    >\r\n        {() => [\r\n            {\r\n                title: \"Intro\",\r\n                render: () => <Intro />,\r\n            },\r\n            {\r\n                title: \"My Skills\",\r\n                render: () => <MySkills />,\r\n            },\r\n        ]}\r\n    </TabMenu>\r\n);\r\n","import * as React from \"react\";\r\nimport { Section } from \"../Common/Section\";\r\nimport { Link } from \"../Common/Link\";\r\n\r\n/**\r\n * TODO:\r\n *  - bio\r\n *  - interests\r\n *  - skills\r\n *  - etc\r\n *  - links to other pages where relevant\r\n *  - pictures of me\r\n *  - drawings / random facts? I have regular lucid dreams\r\n */\r\n\r\nexport const Intro = () => (\r\n    <div>\r\n        <h1>Hello! I am Tim.</h1>\r\n        <Section header={<h2>Bio</h2>}>\r\n            <p>\r\n                I'm currently finishing my bachelor's degree in Computer Science\r\n                at UBC Vancouver. When I'm not biking or exploring nature, I\r\n                like to create my own worlds, usually with software, sometimes\r\n                with Lego. Most of my software projects revolve around trying to\r\n                emulate organic chaos and complexity of some form or another.\r\n            </p>\r\n            <p>\r\n                Take a look around. Please{\" \"}\r\n                <a href=\"mailto:straubinger.tim@gmail.com\">ask me</a> any\r\n                questions you have about my work.\r\n            </p>\r\n        </Section>\r\n        <Section header={<h2>Resume</h2>}>\r\n            <p>\r\n                Click <Link dst=\"TimStraubingerCV.pdf\">here</Link> for my\r\n                resume.\r\n            </p>\r\n        </Section>\r\n    </div>\r\n);\r\n","import * as React from \"react\";\r\nimport { Section, SubSection } from \"../Common/Section\";\r\nimport { Link } from \"../Common/Link\";\r\n\r\n// TODO: pdf resume, skills, past work, personal projects, etc\r\n\r\nexport const MySkills = () => (\r\n    <>\r\n        <h1>My Skills</h1>\r\n        <Section header={<h2>Curriculum Vitae</h2>}>\r\n            Click <Link dst=\"TimStraubingerCV.pdf\">here for my CV</Link>\r\n        </Section>\r\n        <Section header={<h2>Skills</h2>}>\r\n            <h4>Programming Languages</h4>\r\n            <p>\r\n                I'm proficient in C++. It's my favourite language by a large\r\n                margin and I've been using it regularly for over 6 years. Given\r\n                the number of times I've learned something new that made me\r\n                rethink the language I thought I knew, I cannot claim to know\r\n                the language through and through. But in addition the basics of\r\n                C++98 like all the fun gadgets of the Standard Library, basic\r\n                object oriented programming, templates, the quirky build model,\r\n                and the constraints and capabilities of the hardware runtime\r\n                environment, I've been internalizing the changes introduced in\r\n                C++11 and make an effort to keep up to date with some of the\r\n                more recent language features since then. I have a great respect\r\n                for the language's power and it's dark side commonly known as\r\n                Undefined Behavior. Some features of the language that I'm very\r\n                familiar with include:\r\n            </p>\r\n            <ul className=\"multicolumn\">\r\n                <li>\r\n                    the <code>auto</code> keyword\r\n                </li>\r\n                <li>move semantics</li>\r\n                <li>variadic templates</li>\r\n                <li>SFINAE techniques</li>\r\n                <li>lambda functions</li>\r\n                <li>smart pointers</li>\r\n                <li>\r\n                    <code>const</code>-correctness\r\n                </li>\r\n                <li>\r\n                    <code>std::function</code>\r\n                </li>\r\n                <li>special member functions</li>\r\n                <li>operator overloading</li>\r\n                <li>\r\n                    the <code>noexcept</code> specifier\r\n                </li>\r\n                <li>\r\n                    the <code>constexpr</code> keyword\r\n                </li>\r\n                <li>uniform initialization</li>\r\n                <li>forwarding references</li>\r\n                <li>multiple inheritance</li>\r\n            </ul>\r\n            <p>\r\n                I also hope to learn more about atomics and using the standard\r\n                libary's synchronization primitives. I eagerly await concepts,\r\n                modules, and coroutines in C++20.\r\n            </p>\r\n            <h4>Other Programming Languages</h4>\r\n            <p>\r\n                I've also spent a lot of time with JavaScript (specifically,\r\n                with TypeScript), and with C. Additional programming languages\r\n                that I have a basic familiarity with include\r\n            </p>\r\n            <ul className=\"multicolumn\">\r\n                <li>Java</li>\r\n                <li>C#</li>\r\n                <li>Julia</li>\r\n                <li>Haskell</li>\r\n                <li>Prolog</li>\r\n                <li>CUDA C</li>\r\n                <li>GLSL</li>\r\n                <li>Erlang</li>\r\n            </ul>\r\n            <SubSection>\r\n                <h4>Frameworks, Environment, Libraries, Tools</h4>\r\n                <ul className=\"multicolumn\">\r\n                    <li>\r\n                        <Link dst=\"https://reactjs.org/\">React</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link dst=\"https://www.sfml-dev.org/\">SFML</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link dst=\"https://www.libsdl.org/\">SDL</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link dst=\"https://threejs.org/\">three.js</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link dst=\"https://www.boost.org/\">Boost</Link>\r\n                    </li>\r\n                    <li>git</li>\r\n                    <li>CMake</li>\r\n                    <li>Visual Studio</li>\r\n                    <li>Visual Studio Code</li>\r\n                </ul>\r\n            </SubSection>\r\n            <SubSection>\r\n                <h4>Human Languages</h4>\r\n                <ul>\r\n                    <li>English</li>\r\n                    <li>German</li>\r\n                </ul>\r\n            </SubSection>\r\n        </Section>\r\n    </>\r\n);\r\n"],"sourceRoot":""}