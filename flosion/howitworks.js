!function(e){var t={};function n(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(a,o,function(t){return e[t]}.bind(null,o));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=19)}([function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.linearMix=t.Color=void 0;class a{constructor(e,t,n,a){this._r=0,this._g=0,this._b=0,this._a=1,"string"==typeof e?this.parseHexString(e):"number"==typeof e&&(this._r=e,this._g=t,this._b=n,this._a=void 0===a?1:a)}get red(){return this._r}get green(){return this._g}get blue(){return this._b}get alpha(){return this._a}set red(e){this._r=Math.min(Math.max(e,0),1)}set green(e){this._g=Math.min(Math.max(e,0),1)}set blue(e){this._b=Math.min(Math.max(e,0),1)}set alpha(e){this._a=Math.min(Math.max(e,0),1)}toHexString(){return"#"+this.toHexByte(this._r)+this.toHexByte(this._g)+this.toHexByte(this._b)+this.toHexByte(this._a)}clone(){return new a(this._r,this._g,this._b,this._a)}parseHexString(e){if(/^#[0-9a-fA-F]*$/.test(e)){if(4===e.length)return this._r=parseInt(e.slice(1,2),16)/15,this._g=parseInt(e.slice(2,3),16)/15,this._b=parseInt(e.slice(3,4),16)/15,void(this._a=1);if(5===e.length)return this._r=parseInt(e.slice(1,2),16)/15,this._g=parseInt(e.slice(2,3),16)/15,this._b=parseInt(e.slice(3,4),16)/15,void(this._a=parseInt(e.slice(4,5),16)/15);if(7===e.length)return this._r=parseInt(e.slice(1,3),16)/255,this._g=parseInt(e.slice(3,5),16)/255,this._b=parseInt(e.slice(5,7),16)/255,void(this._a=1);if(9===e.length)return this._r=parseInt(e.slice(1,3),16)/255,this._g=parseInt(e.slice(3,5),16)/255,this._b=parseInt(e.slice(5,7),16)/255,void(this._a=parseInt(e.slice(7,9),16)/255)}throw Error("Invalid hexadecimal color string")}toHexByte(e){const t=Math.min(Math.max(Math.round(255*e),0),255).toString(16);return 1==t.length?"0"+t:t}}t.Color=a,t.linearMix=function(e,t,n){const o=void 0===n?.5:n,s=1-o;return new a(e.red*s+t.red*o,e.green*s+t.green*o,e.blue*s+t.blue*o,e.alpha*s+t.alpha*o)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPathHeadName=t.getPathSiblings=t.makePathFileName=t.pathContains=t.__DoNotUse_SafetyCheck_2__=t.__DoNotUse_SafetyCheck_1__=void 0;const a={index:"About Me",abilities:"Abilities",flosion:"Flosion",fractals:"Fractals",rigidbodydynamics:"Rigid Body Dynamics",cellularautomata:"Cellular Automata",other:"Other Projects"},o=["index","abilities","flosion","fractals","rigidbodydynamics","cellularautomata","other"],s={index:"About",howitworks:"How It Works",implementation:"Implementation",examples:"Examples",gallery:"Song Gallery"},i=["index","howitworks","implementation","examples","gallery"],r={index:"About",gallery:"Gallery"},l=["index","gallery"],c={index:"Circle Box Stacking",boxchain:"Box Chain",frictiondemo:"Friction Demo",frictionlessboxes:"Frictionless Boxes",circlepile:"Circle Pile"},u=["index","boxchain","frictiondemo","frictionlessboxes","circlepile"],m={index:"Tim's GUI",platformer:"Platformer Game",gibberishgenerators:"Gibberish Generator",random:"Random"},h=["index","platformer","gibberishgenerators","random"];t.__DoNotUse_SafetyCheck_1__=e=>{},t.__DoNotUse_SafetyCheck_2__=e=>t.__DoNotUse_SafetyCheck_1__(e[0]),t.pathContains=function(e,t){for(let n=0;n<t.length;++n){if(n>e.length)return"index"===t[n];if(t[n]!==e[n])return!1}return!0},t.makePathFileName=function(e,t){return void 0===t&&(t="html"),"/"+(()=>{if(2===e.length)return e[0]+"/"+e[1];switch(e[0]){case"index":case"abilities":case"cellularautomata":return e[0];case"flosion":case"fractals":case"rigidbodydynamics":case"other":return e[0]+"/index"}})()+(""===t?"":"."+t)},t.getPathSiblings=function(e){const t=o.map(e=>[e]);switch(e[0]){case"index":case"abilities":return[t];case"flosion":return[t,i.map(e=>["flosion",e])];case"fractals":return[t,l.map(e=>["fractals",e])];case"rigidbodydynamics":return[t,u.map(e=>["rigidbodydynamics",e])];case"cellularautomata":return[t];case"other":return[t,h.map(e=>["other",e])]}},t.getPathHeadName=function(e){if(1===e.length)return a[e[0]];switch(e[0]){case"flosion":return s[e[1]];case"fractals":return r[e[1]];case"rigidbodydynamics":return c[e[1]];case"other":return m[e[1]]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LocalLink=t.Link=void 0;const a=n(0),o=n(2);t.Link=e=>a.createElement("a",{href:e.dst,target:"_blank",rel:"noopener noreferrer"},e.children),t.LocalLink=e=>a.createElement("a",{href:o.makePathFileName(e.dst)},e.children)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TabMenuItem=void 0;const a=n(0);class o extends a.Component{constructor(e){super(e),this.startHover=()=>{this.setState({hover:!0})},this.stopHover=()=>{this.setState({hover:!1})},this.state={hover:!1}}render(){let e=this.props.color;this.props.active&&this.props.activeColor?e=this.props.activeColor:this.state.hover&&this.props.hoverColor&&(e=this.props.hoverColor);const t={backgroundColor:e.toHexString()};return a.createElement("div",{className:this.props.active?"tabmenuitem-active":"tabmenuitem",style:t,onClick:this.props.onClick,onMouseEnter:this.startHover,onMouseLeave:this.stopHover},a.createElement("span",{className:"tabmenuitem-title"},this.props.title))}}t.TabMenuItem=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderPage=void 0;const a=n(0),o=n(6),s=n(7);t.renderPage=function(e,t){o.render(a.createElement(s.Main,{currentTab:e},t),document.getElementById("main"))}},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Main=void 0;const a=n(0),o=n(8),s=n(1),i=[new s.Color("#626289"),new s.Color("#FFFFFF"),new s.Color("#DDDDDD"),new s.Color("#FFFFFF"),new s.Color("#DDDDDD")];t.Main=e=>a.createElement(a.Fragment,null,a.createElement("div",{className:"backdrop"}),a.createElement("div",{className:"maincontainer"},a.createElement("div",{className:"mainbody"},a.createElement("h1",{className:"mainheader"},"Tim's Portfolio"),a.createElement(o.StaticTabMenuStack,{currentTab:e.currentTab,colours:i,children:e.children}))))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StaticTabMenuStack=void 0;const a=n(0),o=n(1),s=n(4),i=n(2),r=n(3),l=e=>{const t=o.linearMix(e.backgroundColor,e.contentColor,.5),n=o.linearMix(t,new o.Color("#fff"),.5);return a.createElement("div",{className:"tabmenu",style:{backgroundColor:e.backgroundColor.toHexString()}},a.createElement("div",{className:"tabmenu-list"},e.tabs.map(o=>(o=>{const l=i.getPathHeadName(o),c=i.makePathFileName(o,"");return a.createElement(r.LocalLink,{dst:o},a.createElement(s.TabMenuItem,{key:c,active:i.pathContains(e.currentTab,o),title:l,color:t,hoverColor:n,activeColor:e.contentColor,onClick:()=>{}}))})(o))),a.createElement("div",{className:"tab-content",style:{backgroundColor:e.contentColor.toHexString()}},e.children))};t.StaticTabMenuStack=e=>{const t=i.getPathSiblings(e.currentTab);let n=e.children;const o=t=>e.colours[t%e.colours.length];let s=t.length,r=o(s);for(let i of t.reverse()){s-=1;const t=o(s);n=a.createElement(l,{backgroundColor:t,contentColor:r,currentTab:e.currentTab,tabs:i},n),r=t}return a.createElement(a.Fragment,null,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SubSection=t.Section=void 0;const a=n(0);t.Section=e=>a.createElement("div",{className:"section"},a.createElement("div",{className:"section-heading"},a.createElement("div",{className:"section-contents"},e.header)),a.createElement("div",{className:"section-body"},a.createElement("div",{className:"section-contents"},e.children))),t.SubSection=e=>a.createElement("div",{className:"subsection"},e.children)},,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BigImage=void 0;const a=n(0);t.BigImage=e=>{const t="/static/img/"+e.name+(e.name.includes(".")?"":".png");return a.createElement("div",{className:"bigimage"},a.createElement("img",{className:"bigimage-img",src:t}))}},,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(0),o=n(5),s=n(9),i=n(12),r=n(3);o.renderPage(["flosion","howitworks"],a.createElement(a.Fragment,null,a.createElement("h1",null,"How Flosion Works"),a.createElement(s.Section,{header:a.createElement("h2",null,"Overview")},a.createElement("h4",null,"Data Types and Objects"),a.createElement("p",null,"In Flosion, there are two data types: sound streams and numbers. There are also objects, which produce and consume this data. The two types, naturally, are sound objects and number objects."),a.createElement(i.BigImage,{name:"flosion/numbersandsounds"}),a.createElement("h4",null,"Number Objects"),a.createElement("p",null,"Number objects have no state. They can only accept numbers as inputs and always produce numbers as outputs. These act just familiar mathematical functions. Examples of number objects include addition, multiplication, trigonometric functions, and numeric constants."),a.createElement(i.BigImage,{name:"flosion/numberobjects"}),a.createElement("h4",null,"Sound Objects"),a.createElement("p",null,"Sound objects produce a stream of sound that can be listened to or given to other objects as input. Sound objects can also take sound streams as inputs, modifying them according to their design, and returning the result as their output. Sound objects can additionally accept numbers as inputs, which may control various behaviors of the sound object. Sound objects are allowed to have stateful information that changes over time as it produces sound. Many sound objects also expose some of their stateful information in the form of number outputs. Some examples include an amplifier, an echo effect, or a sound clip."),a.createElement(i.BigImage,{name:"flosion/soundobjects"}),a.createElement(s.SubSection,null,a.createElement("h4",null,"Flow Networks"),a.createElement("p",null,"Sound objects and number objects can be wired together ad hoc to create a network. This is done simply by connecting number outputs with number inputs, and sound outputs with sound inputs. In these networks, sound is always flowing in one direction and numbers are flowing in the opposite direction. Why this is so is explained further down. The output of these networks is a sound that can be listened to. For example, one can attach the output of a sound clip object to the input of an amplifier object, to define a network which produces a louder or quieter version of the original sound clip."),a.createElement(i.BigImage,{name:"flosion/ampnetwork"}),a.createElement("p",null,"Of course, these networks can get far more interesting."),a.createElement(i.BigImage,{name:"flosion/morecomplicated"})),a.createElement(s.SubSection,null,a.createElement("h4",null,"Inputs and Outputs"),a.createElement("p",null,"For sending and receiving numbers, there are of number inputs and number outputs. There are also sound ouputs, which produce streams of sound, and sound inputs, which consume them. There are two types of sound inputs, single-inputs and multi-inputs. A sound output that is connected to a single-input always produces a single stream of sound for that input. But a sound output that is connected to a multi-input can produce multiple streams, at the same time. A multi-input always has some known"," ",a.createElement(r.Link,{dst:"https://en.wikipedia.org/wiki/Arity"},"arity"),", which is a number that generalizes the number of streams it can receive in parallel. A single-input is essentially a special case of a multi-input, with a fixed arity of 1."),a.createElement(i.BigImage,{name:"flosion/inputsandoutputs"})),a.createElement(s.SubSection,null,a.createElement("h4",null,"Parallelism"),a.createElement("p",null,"Recall that sound objects are allowed to have state. Actually, sound objects can have ",a.createElement("i",null,"multiple")," states at the same time. This is one case where Flosion departs from the physical realm a bit. The reason for this is that sometimes the same sound stream needs to be used in multiple places, and the results want to be heard in real-time. Another reason is the existence of sound multi-inputs, which call upon their inputs multiple times in parallel. Multi-inputs are very useful for creating certain types of sound objects. For example, a synthesizer can be plugged into the multi-input of a sound object that generates a melody from some number of notes notes. The result is that if the melody has n notes, then for every state of the melody generator, there will be an additional n states in the synthesizer. This way, the melody can use the same synthesizer multiple times in parallel to play overlapping notes, without any distortions or conflict from shared state."),a.createElement(i.BigImage,{name:"flosion/parallelsynth"}),a.createElement("h4",null,"Relativism"),a.createElement("p",null,"Another quirk of Flosion is that time is very relative. Some sound objects create delays in the sounds they draw upon, and other sound objects change the speed of time coming from their inputs. This means that when one sound object queries the current time of another sound object, it might see different value and a different speed of time from what it knows. This isn't as big of a problem as it might sound. In practice, it just works out."),a.createElement(i.BigImage,{name:"flosion/timestretchdelay"})),a.createElement(s.SubSection,null,a.createElement("h4",null,"The Flow of Information"),a.createElement("p",null,"In Flosion, sound streams always flow in one direction, and numbers always flow in the opposite direction. This is necessary because of multi-inputs, which allow one sound object to call upon an input many times in parallel. This means that the parent sound object sees many states in the child sound object, while the child object only ever sees one parent state. Thus it's a bit meaningless for the parent object to ask for stateful information from the child, while it always makes sense for a child to ask for stateful information from a parent. Of course, this restriction doesn't apply for constants and numbers that don't depend on state, but those never change and are a bit boring anyway. Thus, sounds flow up the network, and numbers flow down the network. With both numbers and sound streams, closed loops would cause an infinite recursion, and so are not allowed."),a.createElement(i.BigImage,{name:"flosion/goodbadconnections"}),a.createElement("h4",null,"Stateful and Stateless numbers"),a.createElement("p",null,"Some numbers in Flosion come from sources that have no state, such as constants, or functions whose inputs are all constants. These can be referred to as global, and they can be used as inputs anywhere. But some numbers come for sources that are stateful, and these are usually sound objects. To preserve the flow of information, stateful number sources cannot be connected to number inputs that don't have access to that state. Again, the flow of numbers needs to be in the direction opposite to the flow of sound. The way that sound is flowing is what decides whose state is visible to which other sound objects."),a.createElement(i.BigImage,{name:"flosion/inaccessible"}),a.createElement("p",null,"Finally, an output can be connected to any number of inputs, but every input can have at most one output."),a.createElement(i.BigImage,{name:"flosion/oneinputmanyoutputs"}))),a.createElement(s.Section,{header:a.createElement("h2",null,"Abstract Structure")},a.createElement("p",null,"The networks of sound objects in Flosion always form a"," ",a.createElement(r.Link,{dst:"https://en.wikipedia.org/wiki/Directed_acyclic_graph"},"directed acyclic graph (DAG)"),". Number objects also always connect to form a DAG, though, as discussed above, the flow of sound and numbers is always in the opposite direction."),a.createElement(i.BigImage,{name:"flosion/subgraphs"}),a.createElement("p",null,"The states of sound objects are a bit special. Every state has a parent state, and every state can have multiple child states. The states of the sound objects thus form a tree, and this tree has a similar structure to the overall sound object network. Given any sound object, it has one state for each state of every sound single-input it is connected to, and n states for each state of every n-adic multi-input it is connected to."),a.createElement(i.BigImage,{name:"flosion/statetree"}))))}]);